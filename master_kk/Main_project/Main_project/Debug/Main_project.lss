
Main_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001024  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00001024  000010b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000ba  008000ba  00001112  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154a  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072a  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aef  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a6  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f28  00000000  00000000  0000445a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005382  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
      8a:	0c 94 10 08 	jmp	0x1020	; 0x1020 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_enable_pulse>:
}

unsigned char USART_Receive_interrupt()
{
	return(UDR);
}
      92:	8b b3       	in	r24, 0x1b	; 27
      94:	81 60       	ori	r24, 0x01	; 1
      96:	8b bb       	out	0x1b, r24	; 27
      98:	00 00       	nop
      9a:	8b b3       	in	r24, 0x1b	; 27
      9c:	8e 7f       	andi	r24, 0xFE	; 254
      9e:	8b bb       	out	0x1b, r24	; 27
      a0:	8e e7       	ldi	r24, 0x7E	; 126
      a2:	91 e0       	ldi	r25, 0x01	; 1
      a4:	01 97       	sbiw	r24, 0x01	; 1
      a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_enable_pulse+0x12>
      a8:	00 00       	nop
      aa:	08 95       	ret

000000ac <LCD_Command>:
      ac:	88 bb       	out	0x18, r24	; 24
      ae:	8b b3       	in	r24, 0x1b	; 27
      b0:	8b 7f       	andi	r24, 0xFB	; 251
      b2:	8b bb       	out	0x1b, r24	; 27
      b4:	8b b3       	in	r24, 0x1b	; 27
      b6:	8d 7f       	andi	r24, 0xFD	; 253
      b8:	8b bb       	out	0x1b, r24	; 27
      ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable_pulse>
      be:	08 95       	ret

000000c0 <LCD_Char>:
      c0:	88 bb       	out	0x18, r24	; 24
      c2:	8b b3       	in	r24, 0x1b	; 27
      c4:	84 60       	ori	r24, 0x04	; 4
      c6:	8b bb       	out	0x1b, r24	; 27
      c8:	8b b3       	in	r24, 0x1b	; 27
      ca:	8d 7f       	andi	r24, 0xFD	; 253
      cc:	8b bb       	out	0x1b, r24	; 27
      ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable_pulse>
      d2:	08 95       	ret

000000d4 <LCD_String>:
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	8c 01       	movw	r16, r24
      de:	c0 e0       	ldi	r28, 0x00	; 0
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	03 c0       	rjmp	.+6      	; 0xea <LCD_String+0x16>
      e4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Char>
      e8:	21 96       	adiw	r28, 0x01	; 1
      ea:	f8 01       	movw	r30, r16
      ec:	ec 0f       	add	r30, r28
      ee:	fd 1f       	adc	r31, r29
      f0:	80 81       	ld	r24, Z
      f2:	81 11       	cpse	r24, r1
      f4:	f7 cf       	rjmp	.-18     	; 0xe4 <LCD_String+0x10>
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	1f 91       	pop	r17
      fc:	0f 91       	pop	r16
      fe:	08 95       	ret

00000100 <LCD_String_xy>:
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	ea 01       	movw	r28, r20
     106:	81 11       	cpse	r24, r1
     108:	07 c0       	rjmp	.+14     	; 0x118 <LCD_String_xy+0x18>
     10a:	60 31       	cpi	r22, 0x10	; 16
     10c:	28 f4       	brcc	.+10     	; 0x118 <LCD_String_xy+0x18>
     10e:	86 2f       	mov	r24, r22
     110:	80 68       	ori	r24, 0x80	; 128
     112:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     116:	08 c0       	rjmp	.+16     	; 0x128 <LCD_String_xy+0x28>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	31 f4       	brne	.+12     	; 0x128 <LCD_String_xy+0x28>
     11c:	60 31       	cpi	r22, 0x10	; 16
     11e:	20 f4       	brcc	.+8      	; 0x128 <LCD_String_xy+0x28>
     120:	86 2f       	mov	r24, r22
     122:	80 6c       	ori	r24, 0xC0	; 192
     124:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     128:	ce 01       	movw	r24, r28
     12a:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_String>
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <LCD_Clear>:
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     13a:	80 e8       	ldi	r24, 0x80	; 128
     13c:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     140:	08 95       	ret

00000142 <LCD_Init>:
     142:	8f ef       	ldi	r24, 0xFF	; 255
     144:	8a bb       	out	0x1a, r24	; 26
     146:	87 bb       	out	0x17, r24	; 23
     148:	87 e8       	ldi	r24, 0x87	; 135
     14a:	93 e1       	ldi	r25, 0x13	; 19
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0xa>
     150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x10>
     152:	00 00       	nop
     154:	88 e3       	ldi	r24, 0x38	; 56
     156:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     15a:	8c e0       	ldi	r24, 0x0C	; 12
     15c:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
     166:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
     16a:	08 95       	ret

0000016c <I2C_Init>:
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	80 b9       	out	0x00, r24	; 0
     170:	85 b3       	in	r24, 0x15	; 21
     172:	83 60       	ori	r24, 0x03	; 3
     174:	85 bb       	out	0x15, r24	; 21
     176:	08 95       	ret

00000178 <I2C_Start>:
     178:	94 ea       	ldi	r25, 0xA4	; 164
     17a:	96 bf       	out	0x36, r25	; 54
     17c:	06 b6       	in	r0, 0x36	; 54
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <I2C_Start+0x4>
     182:	91 b1       	in	r25, 0x01	; 1
     184:	98 7f       	andi	r25, 0xF8	; 248
     186:	98 30       	cpi	r25, 0x08	; 8
     188:	71 f4       	brne	.+28     	; 0x1a6 <I2C_Start+0x2e>
     18a:	83 b9       	out	0x03, r24	; 3
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	86 bf       	out	0x36, r24	; 54
     190:	06 b6       	in	r0, 0x36	; 54
     192:	07 fe       	sbrs	r0, 7
     194:	fd cf       	rjmp	.-6      	; 0x190 <I2C_Start+0x18>
     196:	81 b1       	in	r24, 0x01	; 1
     198:	88 7f       	andi	r24, 0xF8	; 248
     19a:	88 31       	cpi	r24, 0x18	; 24
     19c:	31 f0       	breq	.+12     	; 0x1aa <I2C_Start+0x32>
     19e:	80 32       	cpi	r24, 0x20	; 32
     1a0:	31 f4       	brne	.+12     	; 0x1ae <I2C_Start+0x36>
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	08 95       	ret
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	08 95       	ret
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	08 95       	ret
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	08 95       	ret

000001b2 <I2C_Repeated_Start>:
     1b2:	94 ea       	ldi	r25, 0xA4	; 164
     1b4:	96 bf       	out	0x36, r25	; 54
     1b6:	06 b6       	in	r0, 0x36	; 54
     1b8:	07 fe       	sbrs	r0, 7
     1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <I2C_Repeated_Start+0x4>
     1bc:	91 b1       	in	r25, 0x01	; 1
     1be:	98 7f       	andi	r25, 0xF8	; 248
     1c0:	90 31       	cpi	r25, 0x10	; 16
     1c2:	71 f4       	brne	.+28     	; 0x1e0 <I2C_Repeated_Start+0x2e>
     1c4:	83 b9       	out	0x03, r24	; 3
     1c6:	84 e8       	ldi	r24, 0x84	; 132
     1c8:	86 bf       	out	0x36, r24	; 54
     1ca:	06 b6       	in	r0, 0x36	; 54
     1cc:	07 fe       	sbrs	r0, 7
     1ce:	fd cf       	rjmp	.-6      	; 0x1ca <I2C_Repeated_Start+0x18>
     1d0:	81 b1       	in	r24, 0x01	; 1
     1d2:	88 7f       	andi	r24, 0xF8	; 248
     1d4:	80 34       	cpi	r24, 0x40	; 64
     1d6:	31 f0       	breq	.+12     	; 0x1e4 <I2C_Repeated_Start+0x32>
     1d8:	88 34       	cpi	r24, 0x48	; 72
     1da:	31 f4       	brne	.+12     	; 0x1e8 <I2C_Repeated_Start+0x36>
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	08 95       	ret
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	08 95       	ret

000001ec <I2C_Write>:
     1ec:	83 b9       	out	0x03, r24	; 3
     1ee:	84 e8       	ldi	r24, 0x84	; 132
     1f0:	86 bf       	out	0x36, r24	; 54
     1f2:	06 b6       	in	r0, 0x36	; 54
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <I2C_Write+0x6>
     1f8:	81 b1       	in	r24, 0x01	; 1
     1fa:	88 7f       	andi	r24, 0xF8	; 248
     1fc:	88 32       	cpi	r24, 0x28	; 40
     1fe:	21 f0       	breq	.+8      	; 0x208 <I2C_Write+0x1c>
     200:	80 33       	cpi	r24, 0x30	; 48
     202:	21 f4       	brne	.+8      	; 0x20c <I2C_Write+0x20>
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	08 95       	ret
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	08 95       	ret

00000210 <I2C_Read_Ack>:
     210:	84 ec       	ldi	r24, 0xC4	; 196
     212:	86 bf       	out	0x36, r24	; 54
     214:	06 b6       	in	r0, 0x36	; 54
     216:	07 fe       	sbrs	r0, 7
     218:	fd cf       	rjmp	.-6      	; 0x214 <I2C_Read_Ack+0x4>
     21a:	83 b1       	in	r24, 0x03	; 3
     21c:	08 95       	ret

0000021e <I2C_Read_Nack>:
     21e:	84 e8       	ldi	r24, 0x84	; 132
     220:	86 bf       	out	0x36, r24	; 54
     222:	06 b6       	in	r0, 0x36	; 54
     224:	07 fe       	sbrs	r0, 7
     226:	fd cf       	rjmp	.-6      	; 0x222 <I2C_Read_Nack+0x4>
     228:	83 b1       	in	r24, 0x03	; 3
     22a:	08 95       	ret

0000022c <I2C_Stop>:
     22c:	84 e9       	ldi	r24, 0x94	; 148
     22e:	86 bf       	out	0x36, r24	; 54
     230:	06 b6       	in	r0, 0x36	; 54
     232:	04 fc       	sbrc	r0, 4
     234:	fd cf       	rjmp	.-6      	; 0x230 <I2C_Stop+0x4>
     236:	08 95       	ret

00000238 <RTC_Read_Clock>:
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
     23c:	80 ed       	ldi	r24, 0xD0	; 208
     23e:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     242:	8c 2f       	mov	r24, r28
     244:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     248:	81 ed       	ldi	r24, 0xD1	; 209
     24a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Repeated_Start>
     24e:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Read_Ack>
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <second+0x1>
     258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <second>
     25c:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Read_Ack>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <minute+0x1>
     266:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <minute>
     26a:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Read_Nack>
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <hour+0x1>
     274:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <hour>
     278:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <RTC_Read_Date>:
     280:	cf 93       	push	r28
     282:	c8 2f       	mov	r28, r24
     284:	80 ed       	ldi	r24, 0xD0	; 208
     286:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     28a:	8c 2f       	mov	r24, r28
     28c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     290:	81 ed       	ldi	r24, 0xD1	; 209
     292:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <I2C_Repeated_Start>
     296:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Read_Ack>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <weekday+0x1>
     2a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <weekday>
     2a4:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Read_Ack>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <date+0x1>
     2ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <date>
     2b2:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Read_Ack>
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__data_end+0x1>
     2bc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
     2c0:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_Read_Nack>
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <year+0x1>
     2ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <year>
     2ce:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <value2BDC>:
     2d6:	2d ec       	ldi	r18, 0xCD	; 205
     2d8:	82 9f       	mul	r24, r18
     2da:	21 2d       	mov	r18, r1
     2dc:	11 24       	eor	r1, r1
     2de:	26 95       	lsr	r18
     2e0:	26 95       	lsr	r18
     2e2:	26 95       	lsr	r18
     2e4:	32 2f       	mov	r19, r18
     2e6:	33 0f       	add	r19, r19
     2e8:	93 2f       	mov	r25, r19
     2ea:	99 0f       	add	r25, r25
     2ec:	99 0f       	add	r25, r25
     2ee:	93 0f       	add	r25, r19
     2f0:	89 1b       	sub	r24, r25
     2f2:	90 e1       	ldi	r25, 0x10	; 16
     2f4:	29 9f       	mul	r18, r25
     2f6:	90 01       	movw	r18, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	8f 70       	andi	r24, 0x0F	; 15
     2fc:	82 2b       	or	r24, r18
     2fe:	08 95       	ret

00000300 <RTC_Clock_Write>:
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	c8 2f       	mov	r28, r24
     308:	d6 2f       	mov	r29, r22
     30a:	14 2f       	mov	r17, r20
     30c:	80 ed       	ldi	r24, 0xD0	; 208
     30e:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     318:	81 2f       	mov	r24, r17
     31a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     31e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     322:	8d 2f       	mov	r24, r29
     324:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     328:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     32c:	8c 2f       	mov	r24, r28
     32e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     336:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	08 95       	ret

00000342 <RTC_Date_Write>:
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	08 2f       	mov	r16, r24
     34c:	16 2f       	mov	r17, r22
     34e:	d4 2f       	mov	r29, r20
     350:	c2 2f       	mov	r28, r18
     352:	80 ed       	ldi	r24, 0xD0	; 208
     354:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     35e:	80 2f       	mov	r24, r16
     360:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     364:	81 2f       	mov	r24, r17
     366:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     36a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     36e:	8d 2f       	mov	r24, r29
     370:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     374:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     378:	8c 2f       	mov	r24, r28
     37a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     37e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     382:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <RTC_Alarm_Init>:
     390:	80 ed       	ldi	r24, 0xD0	; 208
     392:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     396:	8e e0       	ldi	r24, 0x0E	; 14
     398:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     39c:	85 e0       	ldi	r24, 0x05	; 5
     39e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3a2:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     3a6:	08 95       	ret

000003a8 <RTC_Alarm1_Time>:
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	c8 2f       	mov	r28, r24
     3b0:	d6 2f       	mov	r29, r22
     3b2:	14 2f       	mov	r17, r20
     3b4:	80 ed       	ldi	r24, 0xD0	; 208
     3b6:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     3ba:	87 e0       	ldi	r24, 0x07	; 7
     3bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3c0:	81 2f       	mov	r24, r17
     3c2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     3c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3ca:	8d 2f       	mov	r24, r29
     3cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     3d0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3d4:	8c 2f       	mov	r24, r28
     3d6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <value2BDC>
     3da:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3de:	80 e8       	ldi	r24, 0x80	; 128
     3e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3e4:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	08 95       	ret

000003f0 <RTC_Alarm_Clear>:
     3f0:	80 ed       	ldi	r24, 0xD0	; 208
     3f2:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
     3f6:	8f e0       	ldi	r24, 0x0F	; 15
     3f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     3fc:	88 e8       	ldi	r24, 0x88	; 136
     3fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Write>
     402:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_Stop>
     406:	08 95       	ret

00000408 <USART_Init>:
     408:	2a b1       	in	r18, 0x0a	; 10
     40a:	28 61       	ori	r18, 0x18	; 24
     40c:	2a b9       	out	0x0a, r18	; 10
     40e:	20 b5       	in	r18, 0x20	; 32
     410:	26 68       	ori	r18, 0x86	; 134
     412:	20 bd       	out	0x20, r18	; 32
     414:	2b b1       	in	r18, 0x0b	; 11
     416:	22 60       	ori	r18, 0x02	; 2
     418:	2b b9       	out	0x0b, r18	; 11
     41a:	2a b1       	in	r18, 0x0a	; 10
     41c:	20 68       	ori	r18, 0x80	; 128
     41e:	2a b9       	out	0x0a, r18	; 10
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	aa 1f       	adc	r26, r26
     42a:	bb 1f       	adc	r27, r27
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	aa 1f       	adc	r26, r26
     432:	bb 1f       	adc	r27, r27
     434:	9c 01       	movw	r18, r24
     436:	ad 01       	movw	r20, r26
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	44 1f       	adc	r20, r20
     43e:	55 1f       	adc	r21, r21
     440:	60 e4       	ldi	r22, 0x40	; 64
     442:	72 e4       	ldi	r23, 0x42	; 66
     444:	8f e0       	ldi	r24, 0x0F	; 15
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__udivmodsi4>
     44c:	da 01       	movw	r26, r20
     44e:	c9 01       	movw	r24, r18
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	a1 09       	sbc	r26, r1
     454:	b1 09       	sbc	r27, r1
     456:	89 b9       	out	0x09, r24	; 9
     458:	89 2f       	mov	r24, r25
     45a:	9a 2f       	mov	r25, r26
     45c:	ab 2f       	mov	r26, r27
     45e:	bb 27       	eor	r27, r27
     460:	a7 fd       	sbrc	r26, 7
     462:	ba 95       	dec	r27
     464:	80 bd       	out	0x20, r24	; 32
     466:	08 95       	ret

00000468 <USART_Transmit>:

void USART_Transmit(unsigned char data){
	while ((UCSRA & (1 << UDRE)) == 0);		//Wait until the transmitter is ready
     468:	5d 9b       	sbis	0x0b, 5	; 11
     46a:	fe cf       	rjmp	.-4      	; 0x468 <USART_Transmit>
	UDR = data; //Put the data in the register
     46c:	8c b9       	out	0x0c, r24	; 12
     46e:	08 95       	ret

00000470 <USART_Transmit_String>:
}

void USART_Transmit_String(char str[]){
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	8c 01       	movw	r16, r24
	int i = 0;
     47a:	c0 e0       	ldi	r28, 0x00	; 0
     47c:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		char character = str[i];
     47e:	f8 01       	movw	r30, r16
     480:	ec 0f       	add	r30, r28
     482:	fd 1f       	adc	r31, r29
		USART_Transmit(character);
     484:	80 81       	ld	r24, Z
     486:	0e 94 34 02 	call	0x468	; 0x468 <USART_Transmit>
		i++;
     48a:	21 96       	adiw	r28, 0x01	; 1
	} while (str[i] != '\0');
     48c:	f8 01       	movw	r30, r16
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	80 81       	ld	r24, Z
     494:	81 11       	cpse	r24, r1
     496:	f3 cf       	rjmp	.-26     	; 0x47e <USART_Transmit_String+0xe>
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <main>:



int main(void)
{
	sei();
     4a2:	78 94       	sei
	GICR |= 1 << INT1; // Enable INT1 (Alarm interrupt)
     4a4:	8b b7       	in	r24, 0x3b	; 59
     4a6:	80 68       	ori	r24, 0x80	; 128
     4a8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
     4aa:	85 b7       	in	r24, 0x35	; 53
     4ac:	88 60       	ori	r24, 0x08	; 8
     4ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10); //Detect falling edge
     4b0:	85 b7       	in	r24, 0x35	; 53
     4b2:	8b 7f       	andi	r24, 0xFB	; 251
     4b4:	85 bf       	out	0x35, r24	; 53
	
    I2C_Init();
     4b6:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Init>
    RTC_Clock_Write(7,59,50);	// Set the time
     4ba:	42 e3       	ldi	r20, 0x32	; 50
     4bc:	6b e3       	ldi	r22, 0x3B	; 59
     4be:	87 e0       	ldi	r24, 0x07	; 7
     4c0:	0e 94 80 01 	call	0x300	; 0x300 <RTC_Clock_Write>
    RTC_Date_Write(1,5,6,24); // Year is the 2 last digits in the year
     4c4:	28 e1       	ldi	r18, 0x18	; 24
     4c6:	46 e0       	ldi	r20, 0x06	; 6
     4c8:	65 e0       	ldi	r22, 0x05	; 5
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 a1 01 	call	0x342	; 0x342 <RTC_Date_Write>
	
	RTC_Alarm_Init();
     4d0:	0e 94 c8 01 	call	0x390	; 0x390 <RTC_Alarm_Init>
	RTC_Alarm1_Time(8,0,0);
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <RTC_Alarm1_Time>
    
    LCD_Init();			/* Initialize LCD */
     4de:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Init>
	
	USART_Init(USART_BAUDRATE);		// Intitialize USART with spesified baud rate
     4e2:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <USART_BAUDRATE>
     4e6:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <USART_BAUDRATE+0x1>
     4ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_BAUDRATE+0x2>
     4ee:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <USART_BAUDRATE+0x3>
     4f2:	0e 94 04 02 	call	0x408	; 0x408 <USART_Init>
     4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <main+0x54>

000004f8 <read_continious_clock>:
	{9, 0, 10},
	{11, 0, 45},
	{15, 30, -1}				// End of day, (have breaklength of -1)
}; 

int read_continious_clock(){
     4f8:	2f 92       	push	r2
     4fa:	3f 92       	push	r3
     4fc:	4f 92       	push	r4
     4fe:	5f 92       	push	r5
     500:	6f 92       	push	r6
     502:	7f 92       	push	r7
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	ad 97       	sbiw	r28, 0x2d	; 45
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	RTC_Read_Date(3);		// Read the date
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	0e 94 40 01 	call	0x280	; 0x280 <RTC_Read_Date>
	if (weekday >= 6){		// Weekday >= 6 is saturday and sunday. go back to sleep ;=)
     532:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <weekday>
     536:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <weekday+0x1>
     53a:	06 97       	sbiw	r24, 0x06	; 6
     53c:	0c f0       	brlt	.+2      	; 0x540 <read_continious_clock+0x48>
     53e:	fb c1       	rjmp	.+1014   	; 0x936 <__stack+0xd7>
     540:	e1 2c       	mov	r14, r1
     542:	f1 2c       	mov	r15, r1
     544:	81 2c       	mov	r8, r1
     546:	91 2c       	mov	r9, r1
     548:	21 2c       	mov	r2, r1
     54a:	31 2c       	mov	r3, r1
     54c:	41 2c       	mov	r4, r1
     54e:	51 2c       	mov	r5, r1
	int break_now = 0;
	int break_i = 0;
	int lecture_minutes;
	char message[5];
	while (1){				// Read clock continiousely on weekdays between alarm to end of day
		RTC_Read_Clock(0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 1c 01 	call	0x238	; 0x238 <RTC_Read_Clock>
		char buffer[20];
		sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00111111), minute, second);
     556:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <second+0x1>
     55a:	8f 93       	push	r24
     55c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <second>
     560:	8f 93       	push	r24
     562:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <minute+0x1>
     566:	8f 93       	push	r24
     568:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <minute>
     56c:	8f 93       	push	r24
     56e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <hour>
     572:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <hour+0x1>
     576:	8f 73       	andi	r24, 0x3F	; 63
     578:	99 27       	eor	r25, r25
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	82 e8       	ldi	r24, 0x82	; 130
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	8e 01       	movw	r16, r28
     588:	06 5e       	subi	r16, 0xE6	; 230
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
     58c:	1f 93       	push	r17
     58e:	0f 93       	push	r16
     590:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
		LCD_String_xy(0,0,buffer);
     594:	a8 01       	movw	r20, r16
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
		 for (int i = 0; i < NUMBER_OF_BREAKS; i++){
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	00 e0       	ldi	r16, 0x00	; 0
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	bf c1       	rjmp	.+894    	; 0x92c <__stack+0xcd>
			 if (break_times[i][1] + break_times[i][2] >= 60){		// If the break start + the break length is 60 or over an hour will elape. Example: break {8, 55, 10}, there break end will be 09.05 so it has to check for one hour greather in the end of break check
     5ae:	f8 01       	movw	r30, r16
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	e0 0f       	add	r30, r16
     5b6:	f1 1f       	adc	r31, r17
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e0 5a       	subi	r30, 0xA0	; 160
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	c2 80       	ldd	r12, Z+2	; 0x02
     5c2:	d3 80       	ldd	r13, Z+3	; 0x03
     5c4:	a4 80       	ldd	r10, Z+4	; 0x04
     5c6:	b5 80       	ldd	r11, Z+5	; 0x05
     5c8:	f6 01       	movw	r30, r12
     5ca:	ea 0d       	add	r30, r10
     5cc:	fb 1d       	adc	r31, r11
     5ce:	ec 33       	cpi	r30, 0x3C	; 60
     5d0:	f1 05       	cpc	r31, r1
     5d2:	34 f0       	brlt	.+12     	; 0x5e0 <read_continious_clock+0xe8>
				 hours_elapsed = (break_times[i][1] + break_times[i][2]) / 60;		// Get the number of hours is elapses
     5d4:	cf 01       	movw	r24, r30
     5d6:	6c e3       	ldi	r22, 0x3C	; 60
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__divmodhi4>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <read_continious_clock+0xec>
			 } else hours_elapsed = 0;
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
			 
			if (hour == break_times[i][0] && minute == break_times[i][1]){	 // If it is breaktime, send the length of the break. 
     5e4:	d8 01       	movw	r26, r16
     5e6:	aa 0f       	add	r26, r26
     5e8:	bb 1f       	adc	r27, r27
     5ea:	a0 0f       	add	r26, r16
     5ec:	b1 1f       	adc	r27, r17
     5ee:	aa 0f       	add	r26, r26
     5f0:	bb 1f       	adc	r27, r27
     5f2:	a0 5a       	subi	r26, 0xA0	; 160
     5f4:	bf 4f       	sbci	r27, 0xFF	; 255
     5f6:	8d 91       	ld	r24, X+
     5f8:	9c 91       	ld	r25, X
     5fa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <hour>
     5fe:	30 91 c1 00 	lds	r19, 0x00C1	; 0x8000c1 <hour+0x1>
     602:	82 17       	cp	r24, r18
     604:	93 07       	cpc	r25, r19
     606:	09 f0       	breq	.+2      	; 0x60a <read_continious_clock+0x112>
     608:	98 c0       	rjmp	.+304    	; 0x73a <read_continious_clock+0x242>
     60a:	40 91 be 00 	lds	r20, 0x00BE	; 0x8000be <minute>
     60e:	50 91 bf 00 	lds	r21, 0x00BF	; 0x8000bf <minute+0x1>
     612:	c4 16       	cp	r12, r20
     614:	d5 06       	cpc	r13, r21
     616:	09 f0       	breq	.+2      	; 0x61a <read_continious_clock+0x122>
     618:	90 c0       	rjmp	.+288    	; 0x73a <read_continious_clock+0x242>
				 if (break_times[i][2] == -1){
     61a:	5f ef       	ldi	r21, 0xFF	; 255
     61c:	a5 16       	cp	r10, r21
     61e:	b5 06       	cpc	r11, r21
     620:	09 f4       	brne	.+2      	; 0x624 <read_continious_clock+0x12c>
     622:	89 c1       	rjmp	.+786    	; 0x936 <__stack+0xd7>
					 // End of day, go back to sleep
					  return 0;
				 }
				 
				 if (break_times[i][2] == 0 && !start_of_day_acknowledged){
     624:	ab 28       	or	r10, r11
     626:	09 f0       	breq	.+2      	; 0x62a <read_continious_clock+0x132>
     628:	50 c0       	rjmp	.+160    	; 0x6ca <read_continious_clock+0x1d2>
     62a:	21 14       	cp	r2, r1
     62c:	31 04       	cpc	r3, r1
     62e:	09 f0       	breq	.+2      	; 0x632 <read_continious_clock+0x13a>
     630:	4c c0       	rjmp	.+152    	; 0x6ca <read_continious_clock+0x1d2>
					 // Start of day
					 lecture_minutes = (break_times[i+1][0] * 60 + break_times[i+1][1]) - (break_times[i][0] * 60 + break_times[i][1]);
     632:	98 01       	movw	r18, r16
     634:	2f 5f       	subi	r18, 0xFF	; 255
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	f9 01       	movw	r30, r18
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	df 01       	movw	r26, r30
     640:	a2 0f       	add	r26, r18
     642:	b3 1f       	adc	r27, r19
     644:	aa 0f       	add	r26, r26
     646:	bb 1f       	adc	r27, r27
     648:	a0 5a       	subi	r26, 0xA0	; 160
     64a:	bf 4f       	sbci	r27, 0xFF	; 255
     64c:	0d 90       	ld	r0, X+
     64e:	bc 91       	ld	r27, X
     650:	a0 2d       	mov	r26, r0
     652:	6c e3       	ldi	r22, 0x3C	; 60
     654:	6a 9f       	mul	r22, r26
     656:	a0 01       	movw	r20, r0
     658:	6b 9f       	mul	r22, r27
     65a:	50 0d       	add	r21, r0
     65c:	11 24       	eor	r1, r1
     65e:	e2 0f       	add	r30, r18
     660:	f3 1f       	adc	r31, r19
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e0 5a       	subi	r30, 0xA0	; 160
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	62 80       	ldd	r6, Z+2	; 0x02
     66c:	73 80       	ldd	r7, Z+3	; 0x03
     66e:	64 0e       	add	r6, r20
     670:	75 1e       	adc	r7, r21
     672:	68 9f       	mul	r22, r24
     674:	90 01       	movw	r18, r0
     676:	69 9f       	mul	r22, r25
     678:	30 0d       	add	r19, r0
     67a:	11 24       	eor	r1, r1
     67c:	c2 0e       	add	r12, r18
     67e:	d3 1e       	adc	r13, r19
     680:	6c 18       	sub	r6, r12
     682:	7d 08       	sbc	r7, r13
					 sprintf(message, "l%d", lecture_minutes);		// Send the message of current lecture length, identified by a "l" at index 0 in the string.
     684:	7f 92       	push	r7
     686:	6f 92       	push	r6
     688:	83 e9       	ldi	r24, 0x93	; 147
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	6c 01       	movw	r12, r24
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
					 USART_Transmit_String(message);
     69e:	c6 01       	movw	r24, r12
     6a0:	0e 94 38 02 	call	0x470	; 0x470 <USART_Transmit_String>
					 LCD_Clear();
     6a4:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
					 LCD_String_xy(1,6,"til pause");
     6a8:	47 e9       	ldi	r20, 0x97	; 151
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	66 e0       	ldi	r22, 0x06	; 6
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
					 start_of_day_acknowledged = 1; // Acknowledge that the start of the day message has been sent
					 break_now = 0;
     6c0:	81 2c       	mov	r8, r1
     6c2:	91 2c       	mov	r9, r1
					 lecture_minutes = (break_times[i+1][0] * 60 + break_times[i+1][1]) - (break_times[i][0] * 60 + break_times[i][1]);
					 sprintf(message, "l%d", lecture_minutes);		// Send the message of current lecture length, identified by a "l" at index 0 in the string.
					 USART_Transmit_String(message);
					 LCD_Clear();
					 LCD_String_xy(1,6,"til pause");
					 start_of_day_acknowledged = 1; // Acknowledge that the start of the day message has been sent
     6c4:	22 24       	eor	r2, r2
     6c6:	23 94       	inc	r2
     6c8:	31 2c       	mov	r3, r1
					 break_now = 0;
				 }
				 
				 if (message_sent == 0 && break_times[i][2] != 0){			// Only send the message once. 
     6ca:	41 14       	cp	r4, r1
     6cc:	51 04       	cpc	r5, r1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <read_continious_clock+0x1da>
     6d0:	8f c0       	rjmp	.+286    	; 0x7f0 <read_continious_clock+0x2f8>
     6d2:	f8 01       	movw	r30, r16
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e0 0f       	add	r30, r16
     6da:	f1 1f       	adc	r31, r17
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e0 5a       	subi	r30, 0xA0	; 160
     6e2:	ff 4f       	sbci	r31, 0xFF	; 255
     6e4:	84 81       	ldd	r24, Z+4	; 0x04
     6e6:	95 81       	ldd	r25, Z+5	; 0x05
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	09 f4       	brne	.+2      	; 0x6ee <read_continious_clock+0x1f6>
     6ec:	81 c0       	rjmp	.+258    	; 0x7f0 <read_continious_clock+0x2f8>
					 sprintf(message, "b%d", break_times[i][2]);		// Send the message of current breaklength, identified by a "b" at index 0 in the string.
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	81 ea       	ldi	r24, 0xA1	; 161
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	de 01       	movw	r26, r28
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	7d 01       	movw	r14, r26
     700:	bf 93       	push	r27
     702:	af 93       	push	r26
     704:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
					 USART_Transmit_String(message);
     708:	c7 01       	movw	r24, r14
     70a:	0e 94 38 02 	call	0x470	; 0x470 <USART_Transmit_String>
					 LCD_Clear();
     70e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
					 LCD_String_xy(1,6,"pause");
     712:	4b e9       	ldi	r20, 0x9B	; 155
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	66 e0       	ldi	r22, 0x06	; 6
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
					 message_sent = 1;
					 break_now = 1;
					 break_i = i;
     72a:	78 01       	movw	r14, r16
					 sprintf(message, "b%d", break_times[i][2]);		// Send the message of current breaklength, identified by a "b" at index 0 in the string.
					 USART_Transmit_String(message);
					 LCD_Clear();
					 LCD_String_xy(1,6,"pause");
					 message_sent = 1;
					 break_now = 1;
     72c:	88 24       	eor	r8, r8
     72e:	83 94       	inc	r8
     730:	91 2c       	mov	r9, r1
				 if (message_sent == 0 && break_times[i][2] != 0){			// Only send the message once. 
					 sprintf(message, "b%d", break_times[i][2]);		// Send the message of current breaklength, identified by a "b" at index 0 in the string.
					 USART_Transmit_String(message);
					 LCD_Clear();
					 LCD_String_xy(1,6,"pause");
					 message_sent = 1;
     732:	44 24       	eor	r4, r4
     734:	43 94       	inc	r4
     736:	51 2c       	mov	r5, r1
     738:	5b c0       	rjmp	.+182    	; 0x7f0 <read_continious_clock+0x2f8>
					 break_now = 1;
					 break_i = i;
				 }
			 } else if (hour == (break_times[i][0]+hours_elapsed) && minute == (break_times[i][1]+break_times[i][2])){		// If the current time is the start of the break + the break length (meaning the break is over)
     73a:	68 0f       	add	r22, r24
     73c:	79 1f       	adc	r23, r25
     73e:	26 17       	cp	r18, r22
     740:	37 07       	cpc	r19, r23
     742:	09 f0       	breq	.+2      	; 0x746 <read_continious_clock+0x24e>
     744:	55 c0       	rjmp	.+170    	; 0x7f0 <read_continious_clock+0x2f8>
     746:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <minute>
     74a:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <minute+0x1>
     74e:	e8 17       	cp	r30, r24
     750:	f9 07       	cpc	r31, r25
     752:	09 f0       	breq	.+2      	; 0x756 <read_continious_clock+0x25e>
     754:	4d c0       	rjmp	.+154    	; 0x7f0 <read_continious_clock+0x2f8>
				 if (message_sent == 1){										// Only send the message once
     756:	b1 e0       	ldi	r27, 0x01	; 1
     758:	4b 16       	cp	r4, r27
     75a:	51 04       	cpc	r5, r1
     75c:	09 f0       	breq	.+2      	; 0x760 <read_continious_clock+0x268>
     75e:	48 c0       	rjmp	.+144    	; 0x7f0 <read_continious_clock+0x2f8>
					 int lecture_hours = break_times[i+1][0] - hour;
     760:	a8 01       	movw	r20, r16
     762:	4f 5f       	subi	r20, 0xFF	; 255
     764:	5f 4f       	sbci	r21, 0xFF	; 255
     766:	fa 01       	movw	r30, r20
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	df 01       	movw	r26, r30
     76e:	a4 0f       	add	r26, r20
     770:	b5 1f       	adc	r27, r21
     772:	aa 0f       	add	r26, r26
     774:	bb 1f       	adc	r27, r27
     776:	a0 5a       	subi	r26, 0xA0	; 160
     778:	bf 4f       	sbci	r27, 0xFF	; 255
     77a:	6d 91       	ld	r22, X+
     77c:	7c 91       	ld	r23, X
     77e:	db 01       	movw	r26, r22
     780:	a2 1b       	sub	r26, r18
     782:	b3 0b       	sbc	r27, r19
					 lecture_minutes = break_times[i+1][1] - minute + lecture_hours*60;
     784:	e4 0f       	add	r30, r20
     786:	f5 1f       	adc	r31, r21
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e0 5a       	subi	r30, 0xA0	; 160
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	62 80       	ldd	r6, Z+2	; 0x02
     792:	73 80       	ldd	r7, Z+3	; 0x03
     794:	a3 01       	movw	r20, r6
     796:	48 1b       	sub	r20, r24
     798:	59 0b       	sbc	r21, r25
     79a:	ca 01       	movw	r24, r20
     79c:	4c e3       	ldi	r20, 0x3C	; 60
     79e:	4a 9f       	mul	r20, r26
     7a0:	30 01       	movw	r6, r0
     7a2:	4b 9f       	mul	r20, r27
     7a4:	70 0c       	add	r7, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	68 0e       	add	r6, r24
     7aa:	79 1e       	adc	r7, r25
					 sprintf(message, "l%d", lecture_minutes);		// Send the message of current lecture length, identified by a "l" at index 0 in the string.
     7ac:	7f 92       	push	r7
     7ae:	6f 92       	push	r6
     7b0:	83 e9       	ldi	r24, 0x93	; 147
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	6c 01       	movw	r12, r24
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
					 USART_Transmit_String(message);
     7c6:	c6 01       	movw	r24, r12
     7c8:	0e 94 38 02 	call	0x470	; 0x470 <USART_Transmit_String>
					 LCD_Clear();
     7cc:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
					 LCD_String_xy(1,6,"til pause");
     7d0:	47 e9       	ldi	r20, 0x97	; 151
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	66 e0       	ldi	r22, 0x06	; 6
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
					 message_sent = 0;
					 break_now = 0;
     7e8:	81 2c       	mov	r8, r1
     7ea:	91 2c       	mov	r9, r1
					 lecture_minutes = break_times[i+1][1] - minute + lecture_hours*60;
					 sprintf(message, "l%d", lecture_minutes);		// Send the message of current lecture length, identified by a "l" at index 0 in the string.
					 USART_Transmit_String(message);
					 LCD_Clear();
					 LCD_String_xy(1,6,"til pause");
					 message_sent = 0;
     7ec:	41 2c       	mov	r4, r1
     7ee:	51 2c       	mov	r5, r1
				 }
			 }
			 
			 //TODO: NOT DISPLAYING TIME LEFT CORRECT
			 char buffer2[20];
			 if (break_now) {
     7f0:	81 14       	cp	r8, r1
     7f2:	91 04       	cpc	r9, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <read_continious_clock+0x300>
     7f6:	4e c0       	rjmp	.+156    	; 0x894 <__stack+0x35>
				 // Calculate the minutes and seconds left for the break
				 int break_minutes_left = (break_times[break_i][0] * 60 + break_times[break_i][1] + break_times[break_i][2]) - (hour * 60 + minute) - 1;
     7f8:	f7 01       	movw	r30, r14
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0d       	add	r30, r14
     800:	ff 1d       	adc	r31, r15
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	e0 5a       	subi	r30, 0xA0	; 160
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	3c e3       	ldi	r19, 0x3C	; 60
     810:	38 9f       	mul	r19, r24
     812:	a0 01       	movw	r20, r0
     814:	39 9f       	mul	r19, r25
     816:	50 0d       	add	r21, r0
     818:	11 24       	eor	r1, r1
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	93 81       	ldd	r25, Z+3	; 0x03
     81e:	84 0f       	add	r24, r20
     820:	95 1f       	adc	r25, r21
     822:	44 81       	ldd	r20, Z+4	; 0x04
     824:	55 81       	ldd	r21, Z+5	; 0x05
     826:	84 0f       	add	r24, r20
     828:	95 1f       	adc	r25, r21
     82a:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <hour>
     82e:	70 91 c1 00 	lds	r23, 0x00C1	; 0x8000c1 <hour+0x1>
     832:	36 9f       	mul	r19, r22
     834:	a0 01       	movw	r20, r0
     836:	37 9f       	mul	r19, r23
     838:	50 0d       	add	r21, r0
     83a:	11 24       	eor	r1, r1
     83c:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <minute>
     840:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <minute+0x1>
     844:	24 0f       	add	r18, r20
     846:	35 1f       	adc	r19, r21
     848:	82 1b       	sub	r24, r18
     84a:	93 0b       	sbc	r25, r19
     84c:	01 97       	sbiw	r24, 0x01	; 1
				 int break_seconds_left = 59 - second;
     84e:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <second>
     852:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <second+0x1>
     856:	2b e3       	ldi	r18, 0x3B	; 59
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	24 1b       	sub	r18, r20
     85c:	35 0b       	sbc	r19, r21
				 sprintf(buffer2, "%02x:%02x", break_minutes_left, break_seconds_left);
     85e:	3f 93       	push	r19
     860:	2f 93       	push	r18
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	85 ea       	ldi	r24, 0xA5	; 165
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	6e 01       	movw	r12, r28
     870:	96 e0       	ldi	r25, 0x06	; 6
     872:	c9 0e       	add	r12, r25
     874:	d1 1c       	adc	r13, r1
     876:	df 92       	push	r13
     878:	cf 92       	push	r12
     87a:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
				 LCD_String_xy(1,0,buffer2);
     87e:	a6 01       	movw	r20, r12
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	4a c0       	rjmp	.+148    	; 0x928 <__stack+0xc9>
			} else {
				 // Calculate the minutes and seconds left for the lecture
				 int lecture_minutes_left = lecture_minutes - (hour * 60 + minute - (break_times[break_i][0] * 60 + break_times[break_i][1])) - 1;
     894:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <hour>
     898:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <hour+0x1>
     89c:	6c e3       	ldi	r22, 0x3C	; 60
     89e:	68 9f       	mul	r22, r24
     8a0:	90 01       	movw	r18, r0
     8a2:	69 9f       	mul	r22, r25
     8a4:	30 0d       	add	r19, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <minute>
     8ac:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <minute+0x1>
     8b0:	28 0f       	add	r18, r24
     8b2:	39 1f       	adc	r19, r25
     8b4:	c7 01       	movw	r24, r14
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	8e 0d       	add	r24, r14
     8bc:	9f 1d       	adc	r25, r15
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	fc 01       	movw	r30, r24
     8c4:	e0 5a       	subi	r30, 0xA0	; 160
     8c6:	ff 4f       	sbci	r31, 0xFF	; 255
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	68 9f       	mul	r22, r24
     8ce:	a0 01       	movw	r20, r0
     8d0:	69 9f       	mul	r22, r25
     8d2:	50 0d       	add	r21, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	82 81       	ldd	r24, Z+2	; 0x02
     8d8:	93 81       	ldd	r25, Z+3	; 0x03
     8da:	84 0f       	add	r24, r20
     8dc:	95 1f       	adc	r25, r21
     8de:	28 1b       	sub	r18, r24
     8e0:	39 0b       	sbc	r19, r25
     8e2:	c3 01       	movw	r24, r6
     8e4:	82 1b       	sub	r24, r18
     8e6:	93 0b       	sbc	r25, r19
     8e8:	01 97       	sbiw	r24, 0x01	; 1
				 int lecture_seconds_left = (uint8_t)second;
     8ea:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <second>
     8ee:	30 91 bd 00 	lds	r19, 0x00BD	; 0x8000bd <second+0x1>
     8f2:	33 27       	eor	r19, r19
				 sprintf(buffer2, "%02d:%02d", lecture_minutes_left, lecture_seconds_left);
     8f4:	3f 93       	push	r19
     8f6:	2f 93       	push	r18
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	8f ea       	ldi	r24, 0xAF	; 175
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	6e 01       	movw	r12, r28
     906:	b6 e0       	ldi	r27, 0x06	; 6
     908:	cb 0e       	add	r12, r27
     90a:	d1 1c       	adc	r13, r1
     90c:	df 92       	push	r13
     90e:	cf 92       	push	r12
     910:	0e 94 26 05 	call	0xa4c	; 0xa4c <sprintf>
				 LCD_String_xy(1,0,buffer2);
     914:	a6 01       	movw	r20, r12
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	while (1){				// Read clock continiousely on weekdays between alarm to end of day
		RTC_Read_Clock(0);
		char buffer[20];
		sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00111111), minute, second);
		LCD_String_xy(0,0,buffer);
		 for (int i = 0; i < NUMBER_OF_BREAKS; i++){
     928:	0f 5f       	subi	r16, 0xFF	; 255
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	05 30       	cpi	r16, 0x05	; 5
     92e:	11 05       	cpc	r17, r1
     930:	0c f4       	brge	.+2      	; 0x934 <__stack+0xd5>
     932:	3d ce       	rjmp	.-902    	; 0x5ae <read_continious_clock+0xb6>
     934:	0d ce       	rjmp	.-998    	; 0x550 <read_continious_clock+0x58>
				 LCD_String_xy(1,0,buffer2);
			 }
				 
		 }
	}
}
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	ad 96       	adiw	r28, 0x2d	; 45
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	8f 90       	pop	r8
     95e:	7f 90       	pop	r7
     960:	6f 90       	pop	r6
     962:	5f 90       	pop	r5
     964:	4f 90       	pop	r4
     966:	3f 90       	pop	r3
     968:	2f 90       	pop	r2
     96a:	08 95       	ret

0000096c <__vector_2>:

// When alarm the SQW pin on the board gets high, detect this using interrulpt
// When the alarm has been triggered, and interrupted the program we need to set the flag to 0 again
// The signal from DS3231 gets low when alarm
ISR(INT1_vect){
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	read_continious_clock();
     98e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <read_continious_clock>
	RTC_Alarm_Clear();
     992:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RTC_Alarm_Clear>
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <__divmodhi4>:
     9b8:	97 fb       	bst	r25, 7
     9ba:	07 2e       	mov	r0, r23
     9bc:	16 f4       	brtc	.+4      	; 0x9c2 <__divmodhi4+0xa>
     9be:	00 94       	com	r0
     9c0:	07 d0       	rcall	.+14     	; 0x9d0 <__divmodhi4_neg1>
     9c2:	77 fd       	sbrc	r23, 7
     9c4:	09 d0       	rcall	.+18     	; 0x9d8 <__divmodhi4_neg2>
     9c6:	0e 94 12 05 	call	0xa24	; 0xa24 <__udivmodhi4>
     9ca:	07 fc       	sbrc	r0, 7
     9cc:	05 d0       	rcall	.+10     	; 0x9d8 <__divmodhi4_neg2>
     9ce:	3e f4       	brtc	.+14     	; 0x9de <__divmodhi4_exit>

000009d0 <__divmodhi4_neg1>:
     9d0:	90 95       	com	r25
     9d2:	81 95       	neg	r24
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	08 95       	ret

000009d8 <__divmodhi4_neg2>:
     9d8:	70 95       	com	r23
     9da:	61 95       	neg	r22
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255

000009de <__divmodhi4_exit>:
     9de:	08 95       	ret

000009e0 <__udivmodsi4>:
     9e0:	a1 e2       	ldi	r26, 0x21	; 33
     9e2:	1a 2e       	mov	r1, r26
     9e4:	aa 1b       	sub	r26, r26
     9e6:	bb 1b       	sub	r27, r27
     9e8:	fd 01       	movw	r30, r26
     9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__udivmodsi4_ep>

000009ec <__udivmodsi4_loop>:
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	ee 1f       	adc	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	a2 17       	cp	r26, r18
     9f6:	b3 07       	cpc	r27, r19
     9f8:	e4 07       	cpc	r30, r20
     9fa:	f5 07       	cpc	r31, r21
     9fc:	20 f0       	brcs	.+8      	; 0xa06 <__udivmodsi4_ep>
     9fe:	a2 1b       	sub	r26, r18
     a00:	b3 0b       	sbc	r27, r19
     a02:	e4 0b       	sbc	r30, r20
     a04:	f5 0b       	sbc	r31, r21

00000a06 <__udivmodsi4_ep>:
     a06:	66 1f       	adc	r22, r22
     a08:	77 1f       	adc	r23, r23
     a0a:	88 1f       	adc	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	1a 94       	dec	r1
     a10:	69 f7       	brne	.-38     	; 0x9ec <__udivmodsi4_loop>
     a12:	60 95       	com	r22
     a14:	70 95       	com	r23
     a16:	80 95       	com	r24
     a18:	90 95       	com	r25
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	bd 01       	movw	r22, r26
     a20:	cf 01       	movw	r24, r30
     a22:	08 95       	ret

00000a24 <__udivmodhi4>:
     a24:	aa 1b       	sub	r26, r26
     a26:	bb 1b       	sub	r27, r27
     a28:	51 e1       	ldi	r21, 0x11	; 17
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <__udivmodhi4_ep>

00000a2c <__udivmodhi4_loop>:
     a2c:	aa 1f       	adc	r26, r26
     a2e:	bb 1f       	adc	r27, r27
     a30:	a6 17       	cp	r26, r22
     a32:	b7 07       	cpc	r27, r23
     a34:	10 f0       	brcs	.+4      	; 0xa3a <__udivmodhi4_ep>
     a36:	a6 1b       	sub	r26, r22
     a38:	b7 0b       	sbc	r27, r23

00000a3a <__udivmodhi4_ep>:
     a3a:	88 1f       	adc	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	5a 95       	dec	r21
     a40:	a9 f7       	brne	.-22     	; 0xa2c <__udivmodhi4_loop>
     a42:	80 95       	com	r24
     a44:	90 95       	com	r25
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	08 95       	ret

00000a4c <sprintf>:
     a4c:	ae e0       	ldi	r26, 0x0E	; 14
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__prologue_saves__+0x1c>
     a58:	0d 89       	ldd	r16, Y+21	; 0x15
     a5a:	1e 89       	ldd	r17, Y+22	; 0x16
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	8c 83       	std	Y+4, r24	; 0x04
     a60:	1a 83       	std	Y+2, r17	; 0x02
     a62:	09 83       	std	Y+1, r16	; 0x01
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	9f e7       	ldi	r25, 0x7F	; 127
     a68:	9e 83       	std	Y+6, r25	; 0x06
     a6a:	8d 83       	std	Y+5, r24	; 0x05
     a6c:	ae 01       	movw	r20, r28
     a6e:	47 5e       	subi	r20, 0xE7	; 231
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	6f 89       	ldd	r22, Y+23	; 0x17
     a74:	78 8d       	ldd	r23, Y+24	; 0x18
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 48 05 	call	0xa90	; 0xa90 <vfprintf>
     a7e:	ef 81       	ldd	r30, Y+7	; 0x07
     a80:	f8 85       	ldd	r31, Y+8	; 0x08
     a82:	e0 0f       	add	r30, r16
     a84:	f1 1f       	adc	r31, r17
     a86:	10 82       	st	Z, r1
     a88:	2e 96       	adiw	r28, 0x0e	; 14
     a8a:	e4 e0       	ldi	r30, 0x04	; 4
     a8c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__epilogue_restores__+0x1c>

00000a90 <vfprintf>:
     a90:	ab e0       	ldi	r26, 0x0B	; 11
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__prologue_saves__>
     a9c:	6c 01       	movw	r12, r24
     a9e:	7b 01       	movw	r14, r22
     aa0:	8a 01       	movw	r16, r20
     aa2:	fc 01       	movw	r30, r24
     aa4:	17 82       	std	Z+7, r1	; 0x07
     aa6:	16 82       	std	Z+6, r1	; 0x06
     aa8:	83 81       	ldd	r24, Z+3	; 0x03
     aaa:	81 ff       	sbrs	r24, 1
     aac:	cc c1       	rjmp	.+920    	; 0xe46 <vfprintf+0x3b6>
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	3c 01       	movw	r6, r24
     ab4:	f6 01       	movw	r30, r12
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	f7 01       	movw	r30, r14
     aba:	93 fd       	sbrc	r25, 3
     abc:	85 91       	lpm	r24, Z+
     abe:	93 ff       	sbrs	r25, 3
     ac0:	81 91       	ld	r24, Z+
     ac2:	7f 01       	movw	r14, r30
     ac4:	88 23       	and	r24, r24
     ac6:	09 f4       	brne	.+2      	; 0xaca <vfprintf+0x3a>
     ac8:	ba c1       	rjmp	.+884    	; 0xe3e <vfprintf+0x3ae>
     aca:	85 32       	cpi	r24, 0x25	; 37
     acc:	39 f4       	brne	.+14     	; 0xadc <vfprintf+0x4c>
     ace:	93 fd       	sbrc	r25, 3
     ad0:	85 91       	lpm	r24, Z+
     ad2:	93 ff       	sbrs	r25, 3
     ad4:	81 91       	ld	r24, Z+
     ad6:	7f 01       	movw	r14, r30
     ad8:	85 32       	cpi	r24, 0x25	; 37
     ada:	29 f4       	brne	.+10     	; 0xae6 <vfprintf+0x56>
     adc:	b6 01       	movw	r22, r12
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     ae4:	e7 cf       	rjmp	.-50     	; 0xab4 <vfprintf+0x24>
     ae6:	91 2c       	mov	r9, r1
     ae8:	21 2c       	mov	r2, r1
     aea:	31 2c       	mov	r3, r1
     aec:	ff e1       	ldi	r31, 0x1F	; 31
     aee:	f3 15       	cp	r31, r3
     af0:	d8 f0       	brcs	.+54     	; 0xb28 <vfprintf+0x98>
     af2:	8b 32       	cpi	r24, 0x2B	; 43
     af4:	79 f0       	breq	.+30     	; 0xb14 <vfprintf+0x84>
     af6:	38 f4       	brcc	.+14     	; 0xb06 <vfprintf+0x76>
     af8:	80 32       	cpi	r24, 0x20	; 32
     afa:	79 f0       	breq	.+30     	; 0xb1a <vfprintf+0x8a>
     afc:	83 32       	cpi	r24, 0x23	; 35
     afe:	a1 f4       	brne	.+40     	; 0xb28 <vfprintf+0x98>
     b00:	23 2d       	mov	r18, r3
     b02:	20 61       	ori	r18, 0x10	; 16
     b04:	1d c0       	rjmp	.+58     	; 0xb40 <vfprintf+0xb0>
     b06:	8d 32       	cpi	r24, 0x2D	; 45
     b08:	61 f0       	breq	.+24     	; 0xb22 <vfprintf+0x92>
     b0a:	80 33       	cpi	r24, 0x30	; 48
     b0c:	69 f4       	brne	.+26     	; 0xb28 <vfprintf+0x98>
     b0e:	23 2d       	mov	r18, r3
     b10:	21 60       	ori	r18, 0x01	; 1
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <vfprintf+0xb0>
     b14:	83 2d       	mov	r24, r3
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	38 2e       	mov	r3, r24
     b1a:	e3 2d       	mov	r30, r3
     b1c:	e4 60       	ori	r30, 0x04	; 4
     b1e:	3e 2e       	mov	r3, r30
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <vfprintf+0xe6>
     b22:	f3 2d       	mov	r31, r3
     b24:	f8 60       	ori	r31, 0x08	; 8
     b26:	1d c0       	rjmp	.+58     	; 0xb62 <vfprintf+0xd2>
     b28:	37 fc       	sbrc	r3, 7
     b2a:	2d c0       	rjmp	.+90     	; 0xb86 <vfprintf+0xf6>
     b2c:	20 ed       	ldi	r18, 0xD0	; 208
     b2e:	28 0f       	add	r18, r24
     b30:	2a 30       	cpi	r18, 0x0A	; 10
     b32:	40 f0       	brcs	.+16     	; 0xb44 <vfprintf+0xb4>
     b34:	8e 32       	cpi	r24, 0x2E	; 46
     b36:	b9 f4       	brne	.+46     	; 0xb66 <vfprintf+0xd6>
     b38:	36 fc       	sbrc	r3, 6
     b3a:	81 c1       	rjmp	.+770    	; 0xe3e <vfprintf+0x3ae>
     b3c:	23 2d       	mov	r18, r3
     b3e:	20 64       	ori	r18, 0x40	; 64
     b40:	32 2e       	mov	r3, r18
     b42:	19 c0       	rjmp	.+50     	; 0xb76 <vfprintf+0xe6>
     b44:	36 fe       	sbrs	r3, 6
     b46:	06 c0       	rjmp	.+12     	; 0xb54 <vfprintf+0xc4>
     b48:	8a e0       	ldi	r24, 0x0A	; 10
     b4a:	98 9e       	mul	r9, r24
     b4c:	20 0d       	add	r18, r0
     b4e:	11 24       	eor	r1, r1
     b50:	92 2e       	mov	r9, r18
     b52:	11 c0       	rjmp	.+34     	; 0xb76 <vfprintf+0xe6>
     b54:	ea e0       	ldi	r30, 0x0A	; 10
     b56:	2e 9e       	mul	r2, r30
     b58:	20 0d       	add	r18, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	22 2e       	mov	r2, r18
     b5e:	f3 2d       	mov	r31, r3
     b60:	f0 62       	ori	r31, 0x20	; 32
     b62:	3f 2e       	mov	r3, r31
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <vfprintf+0xe6>
     b66:	8c 36       	cpi	r24, 0x6C	; 108
     b68:	21 f4       	brne	.+8      	; 0xb72 <vfprintf+0xe2>
     b6a:	83 2d       	mov	r24, r3
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	38 2e       	mov	r3, r24
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0xe6>
     b72:	88 36       	cpi	r24, 0x68	; 104
     b74:	41 f4       	brne	.+16     	; 0xb86 <vfprintf+0xf6>
     b76:	f7 01       	movw	r30, r14
     b78:	93 fd       	sbrc	r25, 3
     b7a:	85 91       	lpm	r24, Z+
     b7c:	93 ff       	sbrs	r25, 3
     b7e:	81 91       	ld	r24, Z+
     b80:	7f 01       	movw	r14, r30
     b82:	81 11       	cpse	r24, r1
     b84:	b3 cf       	rjmp	.-154    	; 0xaec <vfprintf+0x5c>
     b86:	98 2f       	mov	r25, r24
     b88:	9f 7d       	andi	r25, 0xDF	; 223
     b8a:	95 54       	subi	r25, 0x45	; 69
     b8c:	93 30       	cpi	r25, 0x03	; 3
     b8e:	28 f4       	brcc	.+10     	; 0xb9a <vfprintf+0x10a>
     b90:	0c 5f       	subi	r16, 0xFC	; 252
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	9f e3       	ldi	r25, 0x3F	; 63
     b96:	99 83       	std	Y+1, r25	; 0x01
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <vfprintf+0x124>
     b9a:	83 36       	cpi	r24, 0x63	; 99
     b9c:	31 f0       	breq	.+12     	; 0xbaa <vfprintf+0x11a>
     b9e:	83 37       	cpi	r24, 0x73	; 115
     ba0:	71 f0       	breq	.+28     	; 0xbbe <vfprintf+0x12e>
     ba2:	83 35       	cpi	r24, 0x53	; 83
     ba4:	09 f0       	breq	.+2      	; 0xba8 <vfprintf+0x118>
     ba6:	59 c0       	rjmp	.+178    	; 0xc5a <vfprintf+0x1ca>
     ba8:	21 c0       	rjmp	.+66     	; 0xbec <vfprintf+0x15c>
     baa:	f8 01       	movw	r30, r16
     bac:	80 81       	ld	r24, Z
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	0e 5f       	subi	r16, 0xFE	; 254
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	88 24       	eor	r8, r8
     bb6:	83 94       	inc	r8
     bb8:	91 2c       	mov	r9, r1
     bba:	53 01       	movw	r10, r6
     bbc:	13 c0       	rjmp	.+38     	; 0xbe4 <vfprintf+0x154>
     bbe:	28 01       	movw	r4, r16
     bc0:	f2 e0       	ldi	r31, 0x02	; 2
     bc2:	4f 0e       	add	r4, r31
     bc4:	51 1c       	adc	r5, r1
     bc6:	f8 01       	movw	r30, r16
     bc8:	a0 80       	ld	r10, Z
     bca:	b1 80       	ldd	r11, Z+1	; 0x01
     bcc:	36 fe       	sbrs	r3, 6
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <vfprintf+0x146>
     bd0:	69 2d       	mov	r22, r9
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0x14a>
     bd6:	6f ef       	ldi	r22, 0xFF	; 255
     bd8:	7f ef       	ldi	r23, 0xFF	; 255
     bda:	c5 01       	movw	r24, r10
     bdc:	0e 94 34 07 	call	0xe68	; 0xe68 <strnlen>
     be0:	4c 01       	movw	r8, r24
     be2:	82 01       	movw	r16, r4
     be4:	f3 2d       	mov	r31, r3
     be6:	ff 77       	andi	r31, 0x7F	; 127
     be8:	3f 2e       	mov	r3, r31
     bea:	16 c0       	rjmp	.+44     	; 0xc18 <vfprintf+0x188>
     bec:	28 01       	movw	r4, r16
     bee:	22 e0       	ldi	r18, 0x02	; 2
     bf0:	42 0e       	add	r4, r18
     bf2:	51 1c       	adc	r5, r1
     bf4:	f8 01       	movw	r30, r16
     bf6:	a0 80       	ld	r10, Z
     bf8:	b1 80       	ldd	r11, Z+1	; 0x01
     bfa:	36 fe       	sbrs	r3, 6
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <vfprintf+0x174>
     bfe:	69 2d       	mov	r22, r9
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <vfprintf+0x178>
     c04:	6f ef       	ldi	r22, 0xFF	; 255
     c06:	7f ef       	ldi	r23, 0xFF	; 255
     c08:	c5 01       	movw	r24, r10
     c0a:	0e 94 29 07 	call	0xe52	; 0xe52 <strnlen_P>
     c0e:	4c 01       	movw	r8, r24
     c10:	f3 2d       	mov	r31, r3
     c12:	f0 68       	ori	r31, 0x80	; 128
     c14:	3f 2e       	mov	r3, r31
     c16:	82 01       	movw	r16, r4
     c18:	33 fc       	sbrc	r3, 3
     c1a:	1b c0       	rjmp	.+54     	; 0xc52 <vfprintf+0x1c2>
     c1c:	82 2d       	mov	r24, r2
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	88 16       	cp	r8, r24
     c22:	99 06       	cpc	r9, r25
     c24:	b0 f4       	brcc	.+44     	; 0xc52 <vfprintf+0x1c2>
     c26:	b6 01       	movw	r22, r12
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     c30:	2a 94       	dec	r2
     c32:	f4 cf       	rjmp	.-24     	; 0xc1c <vfprintf+0x18c>
     c34:	f5 01       	movw	r30, r10
     c36:	37 fc       	sbrc	r3, 7
     c38:	85 91       	lpm	r24, Z+
     c3a:	37 fe       	sbrs	r3, 7
     c3c:	81 91       	ld	r24, Z+
     c3e:	5f 01       	movw	r10, r30
     c40:	b6 01       	movw	r22, r12
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     c48:	21 10       	cpse	r2, r1
     c4a:	2a 94       	dec	r2
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	82 1a       	sub	r8, r18
     c50:	91 08       	sbc	r9, r1
     c52:	81 14       	cp	r8, r1
     c54:	91 04       	cpc	r9, r1
     c56:	71 f7       	brne	.-36     	; 0xc34 <vfprintf+0x1a4>
     c58:	e8 c0       	rjmp	.+464    	; 0xe2a <vfprintf+0x39a>
     c5a:	84 36       	cpi	r24, 0x64	; 100
     c5c:	11 f0       	breq	.+4      	; 0xc62 <vfprintf+0x1d2>
     c5e:	89 36       	cpi	r24, 0x69	; 105
     c60:	41 f5       	brne	.+80     	; 0xcb2 <vfprintf+0x222>
     c62:	f8 01       	movw	r30, r16
     c64:	37 fe       	sbrs	r3, 7
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <vfprintf+0x1e6>
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	0c 5f       	subi	r16, 0xFC	; 252
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <vfprintf+0x1f6>
     c76:	60 81       	ld	r22, Z
     c78:	71 81       	ldd	r23, Z+1	; 0x01
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	0e 5f       	subi	r16, 0xFE	; 254
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	f3 2d       	mov	r31, r3
     c88:	ff 76       	andi	r31, 0x6F	; 111
     c8a:	3f 2e       	mov	r3, r31
     c8c:	97 ff       	sbrs	r25, 7
     c8e:	09 c0       	rjmp	.+18     	; 0xca2 <vfprintf+0x212>
     c90:	90 95       	com	r25
     c92:	80 95       	com	r24
     c94:	70 95       	com	r23
     c96:	61 95       	neg	r22
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	f0 68       	ori	r31, 0x80	; 128
     ca0:	3f 2e       	mov	r3, r31
     ca2:	2a e0       	ldi	r18, 0x0A	; 10
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a3 01       	movw	r20, r6
     ca8:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ultoa_invert>
     cac:	88 2e       	mov	r8, r24
     cae:	86 18       	sub	r8, r6
     cb0:	45 c0       	rjmp	.+138    	; 0xd3c <vfprintf+0x2ac>
     cb2:	85 37       	cpi	r24, 0x75	; 117
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <vfprintf+0x232>
     cb6:	23 2d       	mov	r18, r3
     cb8:	2f 7e       	andi	r18, 0xEF	; 239
     cba:	b2 2e       	mov	r11, r18
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	25 c0       	rjmp	.+74     	; 0xd0c <vfprintf+0x27c>
     cc2:	93 2d       	mov	r25, r3
     cc4:	99 7f       	andi	r25, 0xF9	; 249
     cc6:	b9 2e       	mov	r11, r25
     cc8:	8f 36       	cpi	r24, 0x6F	; 111
     cca:	c1 f0       	breq	.+48     	; 0xcfc <vfprintf+0x26c>
     ccc:	18 f4       	brcc	.+6      	; 0xcd4 <vfprintf+0x244>
     cce:	88 35       	cpi	r24, 0x58	; 88
     cd0:	79 f0       	breq	.+30     	; 0xcf0 <vfprintf+0x260>
     cd2:	b5 c0       	rjmp	.+362    	; 0xe3e <vfprintf+0x3ae>
     cd4:	80 37       	cpi	r24, 0x70	; 112
     cd6:	19 f0       	breq	.+6      	; 0xcde <vfprintf+0x24e>
     cd8:	88 37       	cpi	r24, 0x78	; 120
     cda:	21 f0       	breq	.+8      	; 0xce4 <vfprintf+0x254>
     cdc:	b0 c0       	rjmp	.+352    	; 0xe3e <vfprintf+0x3ae>
     cde:	e9 2f       	mov	r30, r25
     ce0:	e0 61       	ori	r30, 0x10	; 16
     ce2:	be 2e       	mov	r11, r30
     ce4:	b4 fe       	sbrs	r11, 4
     ce6:	0d c0       	rjmp	.+26     	; 0xd02 <vfprintf+0x272>
     ce8:	fb 2d       	mov	r31, r11
     cea:	f4 60       	ori	r31, 0x04	; 4
     cec:	bf 2e       	mov	r11, r31
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x272>
     cf0:	34 fe       	sbrs	r3, 4
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <vfprintf+0x278>
     cf4:	29 2f       	mov	r18, r25
     cf6:	26 60       	ori	r18, 0x06	; 6
     cf8:	b2 2e       	mov	r11, r18
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0x278>
     cfc:	28 e0       	ldi	r18, 0x08	; 8
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <vfprintf+0x27c>
     d02:	20 e1       	ldi	r18, 0x10	; 16
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x27c>
     d08:	20 e1       	ldi	r18, 0x10	; 16
     d0a:	32 e0       	ldi	r19, 0x02	; 2
     d0c:	f8 01       	movw	r30, r16
     d0e:	b7 fe       	sbrs	r11, 7
     d10:	07 c0       	rjmp	.+14     	; 0xd20 <vfprintf+0x290>
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	0c 5f       	subi	r16, 0xFC	; 252
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <vfprintf+0x29c>
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	a3 01       	movw	r20, r6
     d2e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__ultoa_invert>
     d32:	88 2e       	mov	r8, r24
     d34:	86 18       	sub	r8, r6
     d36:	fb 2d       	mov	r31, r11
     d38:	ff 77       	andi	r31, 0x7F	; 127
     d3a:	3f 2e       	mov	r3, r31
     d3c:	36 fe       	sbrs	r3, 6
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <vfprintf+0x2ca>
     d40:	23 2d       	mov	r18, r3
     d42:	2e 7f       	andi	r18, 0xFE	; 254
     d44:	a2 2e       	mov	r10, r18
     d46:	89 14       	cp	r8, r9
     d48:	58 f4       	brcc	.+22     	; 0xd60 <vfprintf+0x2d0>
     d4a:	34 fe       	sbrs	r3, 4
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <vfprintf+0x2d4>
     d4e:	32 fc       	sbrc	r3, 2
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x2d4>
     d52:	83 2d       	mov	r24, r3
     d54:	8e 7e       	andi	r24, 0xEE	; 238
     d56:	a8 2e       	mov	r10, r24
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <vfprintf+0x2d4>
     d5a:	b8 2c       	mov	r11, r8
     d5c:	a3 2c       	mov	r10, r3
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <vfprintf+0x2d6>
     d60:	b8 2c       	mov	r11, r8
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x2d6>
     d64:	b9 2c       	mov	r11, r9
     d66:	a4 fe       	sbrs	r10, 4
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <vfprintf+0x2f8>
     d6a:	fe 01       	movw	r30, r28
     d6c:	e8 0d       	add	r30, r8
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 81       	ld	r24, Z
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	21 f4       	brne	.+8      	; 0xd7e <vfprintf+0x2ee>
     d76:	9a 2d       	mov	r25, r10
     d78:	99 7e       	andi	r25, 0xE9	; 233
     d7a:	a9 2e       	mov	r10, r25
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <vfprintf+0x300>
     d7e:	a2 fe       	sbrs	r10, 2
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <vfprintf+0x2fe>
     d82:	b3 94       	inc	r11
     d84:	b3 94       	inc	r11
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <vfprintf+0x300>
     d88:	8a 2d       	mov	r24, r10
     d8a:	86 78       	andi	r24, 0x86	; 134
     d8c:	09 f0       	breq	.+2      	; 0xd90 <vfprintf+0x300>
     d8e:	b3 94       	inc	r11
     d90:	a3 fc       	sbrc	r10, 3
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <vfprintf+0x326>
     d94:	a0 fe       	sbrs	r10, 0
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x314>
     d98:	b2 14       	cp	r11, r2
     d9a:	88 f4       	brcc	.+34     	; 0xdbe <vfprintf+0x32e>
     d9c:	28 0c       	add	r2, r8
     d9e:	92 2c       	mov	r9, r2
     da0:	9b 18       	sub	r9, r11
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <vfprintf+0x330>
     da4:	b2 14       	cp	r11, r2
     da6:	60 f4       	brcc	.+24     	; 0xdc0 <vfprintf+0x330>
     da8:	b6 01       	movw	r22, r12
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     db2:	b3 94       	inc	r11
     db4:	f7 cf       	rjmp	.-18     	; 0xda4 <vfprintf+0x314>
     db6:	b2 14       	cp	r11, r2
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <vfprintf+0x330>
     dba:	2b 18       	sub	r2, r11
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x332>
     dbe:	98 2c       	mov	r9, r8
     dc0:	21 2c       	mov	r2, r1
     dc2:	a4 fe       	sbrs	r10, 4
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <vfprintf+0x356>
     dc6:	b6 01       	movw	r22, r12
     dc8:	80 e3       	ldi	r24, 0x30	; 48
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     dd0:	a2 fe       	sbrs	r10, 2
     dd2:	17 c0       	rjmp	.+46     	; 0xe02 <vfprintf+0x372>
     dd4:	a1 fc       	sbrc	r10, 1
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <vfprintf+0x34e>
     dd8:	88 e7       	ldi	r24, 0x78	; 120
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x352>
     dde:	88 e5       	ldi	r24, 0x58	; 88
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	b6 01       	movw	r22, r12
     de4:	0c c0       	rjmp	.+24     	; 0xdfe <vfprintf+0x36e>
     de6:	8a 2d       	mov	r24, r10
     de8:	86 78       	andi	r24, 0x86	; 134
     dea:	59 f0       	breq	.+22     	; 0xe02 <vfprintf+0x372>
     dec:	a1 fe       	sbrs	r10, 1
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x364>
     df0:	8b e2       	ldi	r24, 0x2B	; 43
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <vfprintf+0x366>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	a7 fc       	sbrc	r10, 7
     df8:	8d e2       	ldi	r24, 0x2D	; 45
     dfa:	b6 01       	movw	r22, r12
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e02:	89 14       	cp	r8, r9
     e04:	38 f4       	brcc	.+14     	; 0xe14 <vfprintf+0x384>
     e06:	b6 01       	movw	r22, r12
     e08:	80 e3       	ldi	r24, 0x30	; 48
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e10:	9a 94       	dec	r9
     e12:	f7 cf       	rjmp	.-18     	; 0xe02 <vfprintf+0x372>
     e14:	8a 94       	dec	r8
     e16:	f3 01       	movw	r30, r6
     e18:	e8 0d       	add	r30, r8
     e1a:	f1 1d       	adc	r31, r1
     e1c:	80 81       	ld	r24, Z
     e1e:	b6 01       	movw	r22, r12
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e26:	81 10       	cpse	r8, r1
     e28:	f5 cf       	rjmp	.-22     	; 0xe14 <vfprintf+0x384>
     e2a:	22 20       	and	r2, r2
     e2c:	09 f4       	brne	.+2      	; 0xe30 <vfprintf+0x3a0>
     e2e:	42 ce       	rjmp	.-892    	; 0xab4 <vfprintf+0x24>
     e30:	b6 01       	movw	r22, r12
     e32:	80 e2       	ldi	r24, 0x20	; 32
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 3f 07 	call	0xe7e	; 0xe7e <fputc>
     e3a:	2a 94       	dec	r2
     e3c:	f6 cf       	rjmp	.-20     	; 0xe2a <vfprintf+0x39a>
     e3e:	f6 01       	movw	r30, r12
     e40:	86 81       	ldd	r24, Z+6	; 0x06
     e42:	97 81       	ldd	r25, Z+7	; 0x07
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x3ba>
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f ef       	ldi	r25, 0xFF	; 255
     e4a:	2b 96       	adiw	r28, 0x0b	; 11
     e4c:	e2 e1       	ldi	r30, 0x12	; 18
     e4e:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__epilogue_restores__>

00000e52 <strnlen_P>:
     e52:	fc 01       	movw	r30, r24
     e54:	05 90       	lpm	r0, Z+
     e56:	61 50       	subi	r22, 0x01	; 1
     e58:	70 40       	sbci	r23, 0x00	; 0
     e5a:	01 10       	cpse	r0, r1
     e5c:	d8 f7       	brcc	.-10     	; 0xe54 <strnlen_P+0x2>
     e5e:	80 95       	com	r24
     e60:	90 95       	com	r25
     e62:	8e 0f       	add	r24, r30
     e64:	9f 1f       	adc	r25, r31
     e66:	08 95       	ret

00000e68 <strnlen>:
     e68:	fc 01       	movw	r30, r24
     e6a:	61 50       	subi	r22, 0x01	; 1
     e6c:	70 40       	sbci	r23, 0x00	; 0
     e6e:	01 90       	ld	r0, Z+
     e70:	01 10       	cpse	r0, r1
     e72:	d8 f7       	brcc	.-10     	; 0xe6a <strnlen+0x2>
     e74:	80 95       	com	r24
     e76:	90 95       	com	r25
     e78:	8e 0f       	add	r24, r30
     e7a:	9f 1f       	adc	r25, r31
     e7c:	08 95       	ret

00000e7e <fputc>:
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	fb 01       	movw	r30, r22
     e88:	23 81       	ldd	r18, Z+3	; 0x03
     e8a:	21 fd       	sbrc	r18, 1
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <fputc+0x16>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	2c c0       	rjmp	.+88     	; 0xeec <fputc+0x6e>
     e94:	22 ff       	sbrs	r18, 2
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <fputc+0x46>
     e98:	46 81       	ldd	r20, Z+6	; 0x06
     e9a:	57 81       	ldd	r21, Z+7	; 0x07
     e9c:	24 81       	ldd	r18, Z+4	; 0x04
     e9e:	35 81       	ldd	r19, Z+5	; 0x05
     ea0:	42 17       	cp	r20, r18
     ea2:	53 07       	cpc	r21, r19
     ea4:	44 f4       	brge	.+16     	; 0xeb6 <fputc+0x38>
     ea6:	a0 81       	ld	r26, Z
     ea8:	b1 81       	ldd	r27, Z+1	; 0x01
     eaa:	9d 01       	movw	r18, r26
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	31 83       	std	Z+1, r19	; 0x01
     eb2:	20 83       	st	Z, r18
     eb4:	8c 93       	st	X, r24
     eb6:	26 81       	ldd	r18, Z+6	; 0x06
     eb8:	37 81       	ldd	r19, Z+7	; 0x07
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	37 83       	std	Z+7, r19	; 0x07
     ec0:	26 83       	std	Z+6, r18	; 0x06
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <fputc+0x6e>
     ec4:	8b 01       	movw	r16, r22
     ec6:	ec 01       	movw	r28, r24
     ec8:	fb 01       	movw	r30, r22
     eca:	00 84       	ldd	r0, Z+8	; 0x08
     ecc:	f1 85       	ldd	r31, Z+9	; 0x09
     ece:	e0 2d       	mov	r30, r0
     ed0:	09 95       	icall
     ed2:	89 2b       	or	r24, r25
     ed4:	e1 f6       	brne	.-72     	; 0xe8e <fputc+0x10>
     ed6:	d8 01       	movw	r26, r16
     ed8:	16 96       	adiw	r26, 0x06	; 6
     eda:	8d 91       	ld	r24, X+
     edc:	9c 91       	ld	r25, X
     ede:	17 97       	sbiw	r26, 0x07	; 7
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	17 96       	adiw	r26, 0x07	; 7
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
     ee8:	16 97       	sbiw	r26, 0x06	; 6
     eea:	ce 01       	movw	r24, r28
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <__ultoa_invert>:
     ef6:	fa 01       	movw	r30, r20
     ef8:	aa 27       	eor	r26, r26
     efa:	28 30       	cpi	r18, 0x08	; 8
     efc:	51 f1       	breq	.+84     	; 0xf52 <__ultoa_invert+0x5c>
     efe:	20 31       	cpi	r18, 0x10	; 16
     f00:	81 f1       	breq	.+96     	; 0xf62 <__ultoa_invert+0x6c>
     f02:	e8 94       	clt
     f04:	6f 93       	push	r22
     f06:	6e 7f       	andi	r22, 0xFE	; 254
     f08:	6e 5f       	subi	r22, 0xFE	; 254
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	af 4f       	sbci	r26, 0xFF	; 255
     f12:	b1 e0       	ldi	r27, 0x01	; 1
     f14:	3e d0       	rcall	.+124    	; 0xf92 <__ultoa_invert+0x9c>
     f16:	b4 e0       	ldi	r27, 0x04	; 4
     f18:	3c d0       	rcall	.+120    	; 0xf92 <__ultoa_invert+0x9c>
     f1a:	67 0f       	add	r22, r23
     f1c:	78 1f       	adc	r23, r24
     f1e:	89 1f       	adc	r24, r25
     f20:	9a 1f       	adc	r25, r26
     f22:	a1 1d       	adc	r26, r1
     f24:	68 0f       	add	r22, r24
     f26:	79 1f       	adc	r23, r25
     f28:	8a 1f       	adc	r24, r26
     f2a:	91 1d       	adc	r25, r1
     f2c:	a1 1d       	adc	r26, r1
     f2e:	6a 0f       	add	r22, r26
     f30:	71 1d       	adc	r23, r1
     f32:	81 1d       	adc	r24, r1
     f34:	91 1d       	adc	r25, r1
     f36:	a1 1d       	adc	r26, r1
     f38:	20 d0       	rcall	.+64     	; 0xf7a <__ultoa_invert+0x84>
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__ultoa_invert+0x48>
     f3c:	68 94       	set
     f3e:	3f 91       	pop	r19
     f40:	2a e0       	ldi	r18, 0x0A	; 10
     f42:	26 9f       	mul	r18, r22
     f44:	11 24       	eor	r1, r1
     f46:	30 19       	sub	r19, r0
     f48:	30 5d       	subi	r19, 0xD0	; 208
     f4a:	31 93       	st	Z+, r19
     f4c:	de f6       	brtc	.-74     	; 0xf04 <__ultoa_invert+0xe>
     f4e:	cf 01       	movw	r24, r30
     f50:	08 95       	ret
     f52:	46 2f       	mov	r20, r22
     f54:	47 70       	andi	r20, 0x07	; 7
     f56:	40 5d       	subi	r20, 0xD0	; 208
     f58:	41 93       	st	Z+, r20
     f5a:	b3 e0       	ldi	r27, 0x03	; 3
     f5c:	0f d0       	rcall	.+30     	; 0xf7c <__ultoa_invert+0x86>
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0x5c>
     f60:	f6 cf       	rjmp	.-20     	; 0xf4e <__ultoa_invert+0x58>
     f62:	46 2f       	mov	r20, r22
     f64:	4f 70       	andi	r20, 0x0F	; 15
     f66:	40 5d       	subi	r20, 0xD0	; 208
     f68:	4a 33       	cpi	r20, 0x3A	; 58
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <__ultoa_invert+0x7c>
     f6c:	49 5d       	subi	r20, 0xD9	; 217
     f6e:	31 fd       	sbrc	r19, 1
     f70:	40 52       	subi	r20, 0x20	; 32
     f72:	41 93       	st	Z+, r20
     f74:	02 d0       	rcall	.+4      	; 0xf7a <__ultoa_invert+0x84>
     f76:	a9 f7       	brne	.-22     	; 0xf62 <__ultoa_invert+0x6c>
     f78:	ea cf       	rjmp	.-44     	; 0xf4e <__ultoa_invert+0x58>
     f7a:	b4 e0       	ldi	r27, 0x04	; 4
     f7c:	a6 95       	lsr	r26
     f7e:	97 95       	ror	r25
     f80:	87 95       	ror	r24
     f82:	77 95       	ror	r23
     f84:	67 95       	ror	r22
     f86:	ba 95       	dec	r27
     f88:	c9 f7       	brne	.-14     	; 0xf7c <__ultoa_invert+0x86>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	61 05       	cpc	r22, r1
     f8e:	71 05       	cpc	r23, r1
     f90:	08 95       	ret
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	0a 2e       	mov	r0, r26
     f98:	06 94       	lsr	r0
     f9a:	57 95       	ror	r21
     f9c:	47 95       	ror	r20
     f9e:	37 95       	ror	r19
     fa0:	27 95       	ror	r18
     fa2:	ba 95       	dec	r27
     fa4:	c9 f7       	brne	.-14     	; 0xf98 <__ultoa_invert+0xa2>
     fa6:	62 0f       	add	r22, r18
     fa8:	73 1f       	adc	r23, r19
     faa:	84 1f       	adc	r24, r20
     fac:	95 1f       	adc	r25, r21
     fae:	a0 1d       	adc	r26, r0
     fb0:	08 95       	ret

00000fb2 <__prologue_saves__>:
     fb2:	2f 92       	push	r2
     fb4:	3f 92       	push	r3
     fb6:	4f 92       	push	r4
     fb8:	5f 92       	push	r5
     fba:	6f 92       	push	r6
     fbc:	7f 92       	push	r7
     fbe:	8f 92       	push	r8
     fc0:	9f 92       	push	r9
     fc2:	af 92       	push	r10
     fc4:	bf 92       	push	r11
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	ca 1b       	sub	r28, r26
     fdc:	db 0b       	sbc	r29, r27
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	09 94       	ijmp

00000fea <__epilogue_restores__>:
     fea:	2a 88       	ldd	r2, Y+18	; 0x12
     fec:	39 88       	ldd	r3, Y+17	; 0x11
     fee:	48 88       	ldd	r4, Y+16	; 0x10
     ff0:	5f 84       	ldd	r5, Y+15	; 0x0f
     ff2:	6e 84       	ldd	r6, Y+14	; 0x0e
     ff4:	7d 84       	ldd	r7, Y+13	; 0x0d
     ff6:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff8:	9b 84       	ldd	r9, Y+11	; 0x0b
     ffa:	aa 84       	ldd	r10, Y+10	; 0x0a
     ffc:	b9 84       	ldd	r11, Y+9	; 0x09
     ffe:	c8 84       	ldd	r12, Y+8	; 0x08
    1000:	df 80       	ldd	r13, Y+7	; 0x07
    1002:	ee 80       	ldd	r14, Y+6	; 0x06
    1004:	fd 80       	ldd	r15, Y+5	; 0x05
    1006:	0c 81       	ldd	r16, Y+4	; 0x04
    1008:	1b 81       	ldd	r17, Y+3	; 0x03
    100a:	aa 81       	ldd	r26, Y+2	; 0x02
    100c:	b9 81       	ldd	r27, Y+1	; 0x01
    100e:	ce 0f       	add	r28, r30
    1010:	d1 1d       	adc	r29, r1
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	ed 01       	movw	r28, r26
    101e:	08 95       	ret

00001020 <_exit>:
    1020:	f8 94       	cli

00001022 <__stop_program>:
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <__stop_program>
