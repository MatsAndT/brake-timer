
Main_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000ede  00000f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000b8  008000b8  00000fca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000157f  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  0000271b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a76  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  000038b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9d  00000000  00000000  000042ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3c       	cpi	r26, 0xC7	; 199
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 04 	call	0x80c	; 0x80c <main>
  8a:	0c 94 6d 07 	jmp	0xeda	; 0xeda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_enable_pulse>:
}

unsigned char USART_Receive_buffer()
{
	return(UDR);
}
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	81 60       	ori	r24, 0x01	; 1
  96:	8b bb       	out	0x1b, r24	; 27
  98:	00 00       	nop
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	8e e7       	ldi	r24, 0x7E	; 126
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_enable_pulse+0x12>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Command>:
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable_pulse>
  be:	08 95       	ret

000000c0 <LCD_Char>:
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_enable_pulse>
  d2:	08 95       	ret

000000d4 <LCD_String>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	8c 01       	movw	r16, r24
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <LCD_String+0x16>
  e4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Char>
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	f8 01       	movw	r30, r16
  ec:	ec 0f       	add	r30, r28
  ee:	fd 1f       	adc	r31, r29
  f0:	80 81       	ld	r24, Z
  f2:	81 11       	cpse	r24, r1
  f4:	f7 cf       	rjmp	.-18     	; 0xe4 <LCD_String+0x10>
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <LCD_String_xy>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ea 01       	movw	r28, r20
 106:	81 11       	cpse	r24, r1
 108:	07 c0       	rjmp	.+14     	; 0x118 <LCD_String_xy+0x18>
 10a:	60 31       	cpi	r22, 0x10	; 16
 10c:	28 f4       	brcc	.+10     	; 0x118 <LCD_String_xy+0x18>
 10e:	86 2f       	mov	r24, r22
 110:	80 68       	ori	r24, 0x80	; 128
 112:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 116:	08 c0       	rjmp	.+16     	; 0x128 <LCD_String_xy+0x28>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	31 f4       	brne	.+12     	; 0x128 <LCD_String_xy+0x28>
 11c:	60 31       	cpi	r22, 0x10	; 16
 11e:	20 f4       	brcc	.+8      	; 0x128 <LCD_String_xy+0x28>
 120:	86 2f       	mov	r24, r22
 122:	80 6c       	ori	r24, 0xC0	; 192
 124:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_String>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <LCD_Clear>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 140:	08 95       	ret

00000142 <LCD_Init>:
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a bb       	out	0x1a, r24	; 26
 146:	87 bb       	out	0x17, r24	; 23
 148:	87 e8       	ldi	r24, 0x87	; 135
 14a:	93 e1       	ldi	r25, 0x13	; 19
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0xa>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x10>
 152:	00 00       	nop
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	0e 94 56 00 	call	0xac	; 0xac <LCD_Command>
 166:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
 16a:	08 95       	ret

0000016c <I2C_Init>:
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 b9       	out	0x00, r24	; 0
 170:	85 b3       	in	r24, 0x15	; 21
 172:	83 60       	ori	r24, 0x03	; 3
 174:	85 bb       	out	0x15, r24	; 21
 176:	08 95       	ret

00000178 <I2C_Start>:
 178:	94 ea       	ldi	r25, 0xA4	; 164
 17a:	96 bf       	out	0x36, r25	; 54
 17c:	06 b6       	in	r0, 0x36	; 54
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <I2C_Start+0x4>
 182:	83 b9       	out	0x03, r24	; 3
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	86 bf       	out	0x36, r24	; 54
 188:	06 b6       	in	r0, 0x36	; 54
 18a:	07 fe       	sbrs	r0, 7
 18c:	fd cf       	rjmp	.-6      	; 0x188 <I2C_Start+0x10>
 18e:	08 95       	ret

00000190 <I2C_Repeated_Start>:
 190:	94 ea       	ldi	r25, 0xA4	; 164
 192:	96 bf       	out	0x36, r25	; 54
 194:	06 b6       	in	r0, 0x36	; 54
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <I2C_Repeated_Start+0x4>
 19a:	83 b9       	out	0x03, r24	; 3
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	86 bf       	out	0x36, r24	; 54
 1a0:	06 b6       	in	r0, 0x36	; 54
 1a2:	07 fe       	sbrs	r0, 7
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <I2C_Repeated_Start+0x10>
 1a6:	08 95       	ret

000001a8 <I2C_Write>:
 1a8:	83 b9       	out	0x03, r24	; 3
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	86 bf       	out	0x36, r24	; 54
 1ae:	06 b6       	in	r0, 0x36	; 54
 1b0:	07 fe       	sbrs	r0, 7
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <I2C_Write+0x6>
 1b4:	08 95       	ret

000001b6 <I2C_Read_Ack>:
 1b6:	84 ec       	ldi	r24, 0xC4	; 196
 1b8:	86 bf       	out	0x36, r24	; 54
 1ba:	06 b6       	in	r0, 0x36	; 54
 1bc:	07 fe       	sbrs	r0, 7
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <I2C_Read_Ack+0x4>
 1c0:	83 b1       	in	r24, 0x03	; 3
 1c2:	08 95       	ret

000001c4 <I2C_Read_Nack>:
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	86 bf       	out	0x36, r24	; 54
 1c8:	06 b6       	in	r0, 0x36	; 54
 1ca:	07 fe       	sbrs	r0, 7
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <I2C_Read_Nack+0x4>
 1ce:	83 b1       	in	r24, 0x03	; 3
 1d0:	08 95       	ret

000001d2 <I2C_Stop>:
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	86 bf       	out	0x36, r24	; 54
 1d6:	06 b6       	in	r0, 0x36	; 54
 1d8:	04 fc       	sbrc	r0, 4
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <I2C_Stop+0x4>
 1dc:	08 95       	ret

000001de <BDC2value>:
 1de:	98 2f       	mov	r25, r24
 1e0:	92 95       	swap	r25
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	8f 70       	andi	r24, 0x0F	; 15
 1e6:	99 0f       	add	r25, r25
 1e8:	29 2f       	mov	r18, r25
 1ea:	22 0f       	add	r18, r18
 1ec:	22 0f       	add	r18, r18
 1ee:	92 0f       	add	r25, r18
 1f0:	89 0f       	add	r24, r25
 1f2:	08 95       	ret

000001f4 <RTC_Read_Clock>:
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 204:	81 ed       	ldi	r24, 0xD1	; 209
 206:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Repeated_Start>
 20a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 20e:	0e 94 ef 00 	call	0x1de	; 0x1de <BDC2value>
 212:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <second>
 216:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 21a:	0e 94 ef 00 	call	0x1de	; 0x1de <BDC2value>
 21e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <minute>
 222:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Read_Nack>
 226:	8f 73       	andi	r24, 0x3F	; 63
 228:	0e 94 ef 00 	call	0x1de	; 0x1de <BDC2value>
 22c:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <hour>
 230:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <RTC_Read_Date>:
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
 23c:	80 ed       	ldi	r24, 0xD0	; 208
 23e:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 242:	8c 2f       	mov	r24, r28
 244:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 248:	81 ed       	ldi	r24, 0xD1	; 209
 24a:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Repeated_Start>
 24e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 252:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <weekday>
 256:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 25a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <date>
 25e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Ack>
 262:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <month>
 266:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Read_Nack>
 26a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <year>
 26e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <value2BDC>:
 276:	2d ec       	ldi	r18, 0xCD	; 205
 278:	82 9f       	mul	r24, r18
 27a:	21 2d       	mov	r18, r1
 27c:	11 24       	eor	r1, r1
 27e:	26 95       	lsr	r18
 280:	26 95       	lsr	r18
 282:	26 95       	lsr	r18
 284:	32 2f       	mov	r19, r18
 286:	33 0f       	add	r19, r19
 288:	93 2f       	mov	r25, r19
 28a:	99 0f       	add	r25, r25
 28c:	99 0f       	add	r25, r25
 28e:	93 0f       	add	r25, r19
 290:	89 1b       	sub	r24, r25
 292:	90 e1       	ldi	r25, 0x10	; 16
 294:	29 9f       	mul	r18, r25
 296:	90 01       	movw	r18, r0
 298:	11 24       	eor	r1, r1
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	82 2b       	or	r24, r18
 29e:	08 95       	ret

000002a0 <RTC_Clock_Write>:
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	c8 2f       	mov	r28, r24
 2a8:	d6 2f       	mov	r29, r22
 2aa:	14 2f       	mov	r17, r20
 2ac:	80 ed       	ldi	r24, 0xD0	; 208
 2ae:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 2b8:	81 2f       	mov	r24, r17
 2ba:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 2be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 2c2:	8d 2f       	mov	r24, r29
 2c4:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 2c8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 2cc:	8c 2f       	mov	r24, r28
 2ce:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 2d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 2d6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <RTC_Date_Write>:
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	08 2f       	mov	r16, r24
 2ec:	16 2f       	mov	r17, r22
 2ee:	d4 2f       	mov	r29, r20
 2f0:	c2 2f       	mov	r28, r18
 2f2:	80 ed       	ldi	r24, 0xD0	; 208
 2f4:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 2fe:	80 2f       	mov	r24, r16
 300:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 304:	81 2f       	mov	r24, r17
 306:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 30a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 30e:	8d 2f       	mov	r24, r29
 310:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 314:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 318:	8c 2f       	mov	r24, r28
 31a:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 31e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 322:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <RTC_Alarm_Init>:
 330:	80 ed       	ldi	r24, 0xD0	; 208
 332:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 33c:	85 e0       	ldi	r24, 0x05	; 5
 33e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 342:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 346:	08 95       	ret

00000348 <RTC_Alarm1_Time>:
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	c8 2f       	mov	r28, r24
 350:	d6 2f       	mov	r29, r22
 352:	14 2f       	mov	r17, r20
 354:	80 ed       	ldi	r24, 0xD0	; 208
 356:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 35a:	87 e0       	ldi	r24, 0x07	; 7
 35c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 360:	81 2f       	mov	r24, r17
 362:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 366:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 36a:	8d 2f       	mov	r24, r29
 36c:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 370:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 374:	8c 2f       	mov	r24, r28
 376:	0e 94 3b 01 	call	0x276	; 0x276 <value2BDC>
 37a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 384:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	08 95       	ret

00000390 <RTC_Alarm_Clear>:
 390:	80 ed       	ldi	r24, 0xD0	; 208
 392:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Start>
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 39c:	88 e8       	ldi	r24, 0x88	; 136
 39e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Write>
 3a2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 3a6:	08 95       	ret

000003a8 <USART_Init>:
 3a8:	2a b1       	in	r18, 0x0a	; 10
 3aa:	28 61       	ori	r18, 0x18	; 24
 3ac:	2a b9       	out	0x0a, r18	; 10
 3ae:	20 b5       	in	r18, 0x20	; 32
 3b0:	26 68       	ori	r18, 0x86	; 134
 3b2:	20 bd       	out	0x20, r18	; 32
 3b4:	2b b1       	in	r18, 0x0b	; 11
 3b6:	22 60       	ori	r18, 0x02	; 2
 3b8:	2b b9       	out	0x0b, r18	; 11
 3ba:	2a b1       	in	r18, 0x0a	; 10
 3bc:	20 68       	ori	r18, 0x80	; 128
 3be:	2a b9       	out	0x0a, r18	; 10
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	9c 01       	movw	r18, r24
 3d6:	ad 01       	movw	r20, r26
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	44 1f       	adc	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	60 e4       	ldi	r22, 0x40	; 64
 3e2:	72 e4       	ldi	r23, 0x42	; 66
 3e4:	8f e0       	ldi	r24, 0x0F	; 15
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 4d 04 	call	0x89a	; 0x89a <__udivmodsi4>
 3ec:	da 01       	movw	r26, r20
 3ee:	c9 01       	movw	r24, r18
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	a1 09       	sbc	r26, r1
 3f4:	b1 09       	sbc	r27, r1
 3f6:	89 b9       	out	0x09, r24	; 9
 3f8:	89 2f       	mov	r24, r25
 3fa:	9a 2f       	mov	r25, r26
 3fc:	ab 2f       	mov	r26, r27
 3fe:	bb 27       	eor	r27, r27
 400:	a7 fd       	sbrc	r26, 7
 402:	ba 95       	dec	r27
 404:	80 bd       	out	0x20, r24	; 32
 406:	08 95       	ret

00000408 <USART_Transmit>:

void USART_Transmit(unsigned char data){
	while ((UCSRA & (1 << UDRE)) == 0);		// Wait until the transmitter is ready
 408:	5d 9b       	sbis	0x0b, 5	; 11
 40a:	fe cf       	rjmp	.-4      	; 0x408 <USART_Transmit>
	UDR = data;								// Put the data in the register
 40c:	8c b9       	out	0x0c, r24	; 12
 40e:	08 95       	ret

00000410 <USART_Transmit_String>:
}

void USART_Transmit_String(char str[]){
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	8c 01       	movw	r16, r24
	int i = 0;
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		char character = str[i];
 41e:	f8 01       	movw	r30, r16
 420:	ec 0f       	add	r30, r28
 422:	fd 1f       	adc	r31, r29
		USART_Transmit(character);
 424:	80 81       	ld	r24, Z
 426:	0e 94 04 02 	call	0x408	; 0x408 <USART_Transmit>
		i++;
 42a:	21 96       	adiw	r28, 0x01	; 1
	} while (str[i] != '\0');
 42c:	f8 01       	movw	r30, r16
 42e:	ec 0f       	add	r30, r28
 430:	fd 1f       	adc	r31, r29
 432:	80 81       	ld	r24, Z
 434:	81 11       	cpse	r24, r1
 436:	f3 cf       	rjmp	.-26     	; 0x41e <USART_Transmit_String+0xe>
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <__vector_2>:
};


// When alarm the SQW pin on the DS3231 gets LOW, detect this using interrupt
// When the alarm has been triggered, and interrupted the program we need to set the flag for alarm on the DS3231 to 0 again
ISR(INT1_vect){
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	LCD_String_xy(0,0,"Alarm");
 464:	42 e8       	ldi	r20, 0x82	; 130
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
	RTC_Read_Date(3);		// Read the date
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	0e 94 1c 01 	call	0x238	; 0x238 <RTC_Read_Date>
	if (weekday >= 6){		// Weekday >= 6 is saturday and sunday: go back to sleep ;=)
 476:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <weekday>
 47a:	86 30       	cpi	r24, 0x06	; 6
 47c:	28 f0       	brcs	.+10     	; 0x488 <__vector_2+0x46>
		read_continious_clock = 0;
 47e:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <read_continious_clock+0x1>
 482:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <read_continious_clock>
 486:	09 c0       	rjmp	.+18     	; 0x49a <__vector_2+0x58>
	} else {
		read_continious_clock = 1; // Start to read form the clock
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <read_continious_clock+0x1>
 490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <read_continious_clock>
		TIMSK |= 1 << OCIE1A; // Enable Output Compare A Match Interrupt
 494:	89 b7       	in	r24, 0x39	; 57
 496:	80 61       	ori	r24, 0x10	; 16
 498:	89 bf       	out	0x39, r24	; 57
	}
	RTC_Alarm_Clear();		// Need to reset the flag after alarm has been read
 49a:	0e 94 c8 01 	call	0x390	; 0x390 <RTC_Alarm_Clear>
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__vector_7>:

volatile int message_sent = 0; // Boolean to keep track of if we have transmitted the message with either break- or lecture length.
volatile int period_length = 0;
volatile int period_end_minutes;
// Trigger at set interval
ISR(TIMER1_COMPA_vect){
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	ad 97       	sbiw	r28, 0x2d	; 45
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	cd bf       	out	0x3d, r28	; 61
	if (read_continious_clock){
 4fc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <read_continious_clock>
 500:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <read_continious_clock+0x1>
 504:	89 2b       	or	r24, r25
 506:	09 f4       	brne	.+2      	; 0x50a <__vector_7+0x4a>
 508:	54 c1       	rjmp	.+680    	; 0x7b2 <__vector_7+0x2f2>
		RTC_Read_Clock(0);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <RTC_Read_Clock>
		int minutes_since_midnight = hour*60 + minute;
 510:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <hour>
 514:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <minute>
 518:	e9 2e       	mov	r14, r25
 51a:	f1 2c       	mov	r15, r1
 51c:	2c e3       	ldi	r18, 0x3C	; 60
 51e:	82 9f       	mul	r24, r18
 520:	e0 0c       	add	r14, r0
 522:	f1 1c       	adc	r15, r1
 524:	11 24       	eor	r1, r1
		char buffer[20];
		sprintf(buffer, "%02d:%02d:%02d", hour, minute, second);
 526:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <second>
 52a:	1f 92       	push	r1
 52c:	2f 93       	push	r18
 52e:	1f 92       	push	r1
 530:	9f 93       	push	r25
 532:	1f 92       	push	r1
 534:	8f 93       	push	r24
 536:	88 e8       	ldi	r24, 0x88	; 136
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	9f 93       	push	r25
 53c:	8f 93       	push	r24
 53e:	8e 01       	movw	r16, r28
 540:	0b 5e       	subi	r16, 0xEB	; 235
 542:	1f 4f       	sbci	r17, 0xFF	; 255
 544:	1f 93       	push	r17
 546:	0f 93       	push	r16
 548:	0e 94 83 04 	call	0x906	; 0x906 <sprintf>
		LCD_String_xy(0,0,buffer);
 54c:	a8 01       	movw	r20, r16
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
		
		char message[5];
		
		for (int i = 0; i < NUMBER_OF_BREAKS; i++){
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	00 e0       	ldi	r16, 0x00	; 0
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	ec c0       	rjmp	.+472    	; 0x73e <__vector_7+0x27e>
			if ((minutes_since_midnight == break_times[i][0]*60 + break_times[i][1]) && break_times[i][2] != 0){ // If the time now is equal to the time the break starts. And it is not the start of the day (break length = 0)
 566:	f8 01       	movw	r30, r16
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	e0 0f       	add	r30, r16
 56e:	f1 1f       	adc	r31, r17
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	e0 5a       	subi	r30, 0xA0	; 160
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	80 81       	ld	r24, Z
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	4c e3       	ldi	r20, 0x3C	; 60
 57e:	48 9f       	mul	r20, r24
 580:	90 01       	movw	r18, r0
 582:	49 9f       	mul	r20, r25
 584:	30 0d       	add	r19, r0
 586:	11 24       	eor	r1, r1
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	93 81       	ldd	r25, Z+3	; 0x03
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	e8 16       	cp	r14, r24
 592:	f9 06       	cpc	r15, r25
 594:	09 f0       	breq	.+2      	; 0x598 <__vector_7+0xd8>
 596:	5f c0       	rjmp	.+190    	; 0x656 <__vector_7+0x196>
 598:	f8 01       	movw	r30, r16
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	e0 0f       	add	r30, r16
 5a0:	f1 1f       	adc	r31, r17
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	e0 5a       	subi	r30, 0xA0	; 160
 5a8:	ff 4f       	sbci	r31, 0xFF	; 255
 5aa:	24 81       	ldd	r18, Z+4	; 0x04
 5ac:	35 81       	ldd	r19, Z+5	; 0x05
 5ae:	21 15       	cp	r18, r1
 5b0:	31 05       	cpc	r19, r1
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <__vector_7+0xf6>
 5b4:	50 c0       	rjmp	.+160    	; 0x656 <__vector_7+0x196>
				if (break_times[i][2] == -1){		// End of day has duration = -1
 5b6:	2f 3f       	cpi	r18, 0xFF	; 255
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	39 07       	cpc	r19, r25
 5bc:	41 f4       	brne	.+16     	; 0x5ce <__vector_7+0x10e>
					/* End of day, go back to sleep */
					TIMSK &= ~(1 << OCIE1A); // Disable Output Compare A Match Interrupt
 5be:	89 b7       	in	r24, 0x39	; 57
 5c0:	8f 7e       	andi	r24, 0xEF	; 239
 5c2:	89 bf       	out	0x39, r24	; 57
					read_continious_clock = 0;
 5c4:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <read_continious_clock+0x1>
 5c8:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <read_continious_clock>
					break;
 5cc:	bc c0       	rjmp	.+376    	; 0x746 <__vector_7+0x286>
				} 
				
				if (message_sent == 1){					// This is reversed, as opposed to when the break is over, this is since after we send break length it should send lecture length
 5ce:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <message_sent>
 5d2:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <message_sent+0x1>
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__vector_7+0x11c>
 5da:	af c0       	rjmp	.+350    	; 0x73a <__vector_7+0x27a>
					period_length = break_times[i][2];
 5dc:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <__data_end+0x1>
 5e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__data_end>
					period_end_minutes = minutes_since_midnight + period_length;
 5e4:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 5e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 5ec:	8e 0d       	add	r24, r14
 5ee:	9f 1d       	adc	r25, r15
 5f0:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <period_end_minutes+0x1>
 5f4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <period_end_minutes>
					sprintf(message, "b%d", period_length);		// Send the message of current break length, identified by a "b" at index 0 in the string
 5f8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 5fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 600:	9f 93       	push	r25
 602:	8f 93       	push	r24
 604:	87 e9       	ldi	r24, 0x97	; 151
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	9f 93       	push	r25
 60a:	8f 93       	push	r24
 60c:	6e 01       	movw	r12, r28
 60e:	29 e2       	ldi	r18, 0x29	; 41
 610:	c2 0e       	add	r12, r18
 612:	d1 1c       	adc	r13, r1
 614:	df 92       	push	r13
 616:	cf 92       	push	r12
 618:	0e 94 83 04 	call	0x906	; 0x906 <sprintf>
					USART_Transmit_String(message);
 61c:	c6 01       	movw	r24, r12
 61e:	0e 94 08 02 	call	0x410	; 0x410 <USART_Transmit_String>
					
					LCD_Clear();
 622:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
					LCD_String_xy(0,0,buffer);		// To print the current time immediately after the clear
 626:	ae 01       	movw	r20, r28
 628:	4b 5e       	subi	r20, 0xEB	; 235
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
					LCD_String_xy(1,7, "PAUSE");
 634:	43 ea       	ldi	r20, 0xA3	; 163
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	67 e0       	ldi	r22, 0x07	; 7
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
					message_sent = 0;
 640:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <message_sent+0x1>
 644:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <message_sent>
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	72 c0       	rjmp	.+228    	; 0x73a <__vector_7+0x27a>
				}
			} else if (minutes_since_midnight == break_times[i][0]*60 + break_times[i][1] + break_times[i][2]){	// The time now is the start of the break time + the break length, so the break is just over
 656:	f8 01       	movw	r30, r16
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	e0 0f       	add	r30, r16
 65e:	f1 1f       	adc	r31, r17
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	e0 5a       	subi	r30, 0xA0	; 160
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	24 81       	ldd	r18, Z+4	; 0x04
 66a:	35 81       	ldd	r19, Z+5	; 0x05
 66c:	82 0f       	add	r24, r18
 66e:	93 1f       	adc	r25, r19
 670:	e8 16       	cp	r14, r24
 672:	f9 06       	cpc	r15, r25
 674:	09 f0       	breq	.+2      	; 0x678 <__vector_7+0x1b8>
 676:	61 c0       	rjmp	.+194    	; 0x73a <__vector_7+0x27a>
				if (message_sent == 0){
 678:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <message_sent>
 67c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <message_sent+0x1>
 680:	89 2b       	or	r24, r25
 682:	09 f0       	breq	.+2      	; 0x686 <__vector_7+0x1c6>
 684:	5a c0       	rjmp	.+180    	; 0x73a <__vector_7+0x27a>
					int next_period_start_minute = break_times[i+1][0]*60 + break_times[i+1][1];
 686:	c8 01       	movw	r24, r16
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	fc 01       	movw	r30, r24
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	df 01       	movw	r26, r30
 692:	a8 0f       	add	r26, r24
 694:	b9 1f       	adc	r27, r25
 696:	aa 0f       	add	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	a0 5a       	subi	r26, 0xA0	; 160
 69c:	bf 4f       	sbci	r27, 0xFF	; 255
 69e:	4d 91       	ld	r20, X+
 6a0:	5c 91       	ld	r21, X
 6a2:	11 97       	sbiw	r26, 0x01	; 1
 6a4:	6c e3       	ldi	r22, 0x3C	; 60
 6a6:	64 9f       	mul	r22, r20
 6a8:	90 01       	movw	r18, r0
 6aa:	65 9f       	mul	r22, r21
 6ac:	30 0d       	add	r19, r0
 6ae:	11 24       	eor	r1, r1
 6b0:	fd 01       	movw	r30, r26
 6b2:	82 81       	ldd	r24, Z+2	; 0x02
 6b4:	93 81       	ldd	r25, Z+3	; 0x03
 6b6:	82 0f       	add	r24, r18
 6b8:	93 1f       	adc	r25, r19
					period_length = next_period_start_minute - minutes_since_midnight;
 6ba:	8e 19       	sub	r24, r14
 6bc:	9f 09       	sbc	r25, r15
 6be:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__data_end+0x1>
 6c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
					period_end_minutes = minutes_since_midnight + period_length;
 6c6:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 6ca:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 6ce:	8e 0d       	add	r24, r14
 6d0:	9f 1d       	adc	r25, r15
 6d2:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <period_end_minutes+0x1>
 6d6:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <period_end_minutes>
					sprintf(message, "l%d", period_length);		// Send the message of current lecture length, identified by a "l" at index 0 in the string
 6da:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
 6de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
 6e2:	9f 93       	push	r25
 6e4:	8f 93       	push	r24
 6e6:	8b e9       	ldi	r24, 0x9B	; 155
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	9f 93       	push	r25
 6ec:	8f 93       	push	r24
 6ee:	6e 01       	movw	r12, r28
 6f0:	89 e2       	ldi	r24, 0x29	; 41
 6f2:	c8 0e       	add	r12, r24
 6f4:	d1 1c       	adc	r13, r1
 6f6:	df 92       	push	r13
 6f8:	cf 92       	push	r12
 6fa:	0e 94 83 04 	call	0x906	; 0x906 <sprintf>
					USART_Transmit_String(message);
 6fe:	c6 01       	movw	r24, r12
 700:	0e 94 08 02 	call	0x410	; 0x410 <USART_Transmit_String>
					
					LCD_Clear();
 704:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_Clear>
					LCD_String_xy(0,0,buffer);
 708:	ae 01       	movw	r20, r28
 70a:	4b 5e       	subi	r20, 0xEB	; 235
 70c:	5f 4f       	sbci	r21, 0xFF	; 255
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
					LCD_String_xy(1,7, "TIL PAUSE");
 716:	4f e9       	ldi	r20, 0x9F	; 159
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	67 e0       	ldi	r22, 0x07	; 7
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
					message_sent = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <message_sent+0x1>
 72a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <message_sent>
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
		sprintf(buffer, "%02d:%02d:%02d", hour, minute, second);
		LCD_String_xy(0,0,buffer);
		
		char message[5];
		
		for (int i = 0; i < NUMBER_OF_BREAKS; i++){
 73a:	0f 5f       	subi	r16, 0xFF	; 255
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	05 30       	cpi	r16, 0x05	; 5
 740:	11 05       	cpc	r17, r1
 742:	0c f4       	brge	.+2      	; 0x746 <__vector_7+0x286>
 744:	10 cf       	rjmp	.-480    	; 0x566 <__vector_7+0xa6>
				}
			}
		}
		
		char message_left[20];
		int total_seconds_left = (period_end_minutes * 60 + 59) - ((minutes_since_midnight+1) * 60 + second);
 746:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <period_end_minutes>
 74a:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <period_end_minutes+0x1>
 74e:	4c e3       	ldi	r20, 0x3C	; 60
 750:	42 9f       	mul	r20, r18
 752:	c0 01       	movw	r24, r0
 754:	43 9f       	mul	r20, r19
 756:	90 0d       	add	r25, r0
 758:	11 24       	eor	r1, r1
 75a:	cb 96       	adiw	r24, 0x3b	; 59
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	e2 1a       	sub	r14, r18
 760:	f2 0a       	sbc	r15, r18
 762:	4e 9d       	mul	r20, r14
 764:	90 01       	movw	r18, r0
 766:	4f 9d       	mul	r20, r15
 768:	30 0d       	add	r19, r0
 76a:	11 24       	eor	r1, r1
 76c:	40 91 c1 00 	lds	r20, 0x00C1	; 0x8000c1 <second>
 770:	24 0f       	add	r18, r20
 772:	31 1d       	adc	r19, r1
 774:	82 1b       	sub	r24, r18
 776:	93 0b       	sbc	r25, r19
		int minutes_left = total_seconds_left / 60;
 778:	6c e3       	ldi	r22, 0x3C	; 60
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
		int seconds_left = total_seconds_left % 60;
		
		sprintf(message_left, "%03d:%02d", minutes_left, seconds_left);
 780:	9f 93       	push	r25
 782:	8f 93       	push	r24
 784:	7f 93       	push	r23
 786:	6f 93       	push	r22
 788:	89 ea       	ldi	r24, 0xA9	; 169
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	9f 93       	push	r25
 78e:	8f 93       	push	r24
 790:	8e 01       	movw	r16, r28
 792:	0f 5f       	subi	r16, 0xFF	; 255
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	1f 93       	push	r17
 798:	0f 93       	push	r16
 79a:	0e 94 83 04 	call	0x906	; 0x906 <sprintf>
		
		LCD_String_xy(1,0, message_left);
 79e:	a8 01       	movw	r20, r16
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
	}
}
 7b2:	ad 96       	adiw	r28, 0x2d	; 45
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	de bf       	out	0x3e, r29	; 62
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	cd bf       	out	0x3d, r28	; 61
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	df 90       	pop	r13
 7e4:	cf 90       	pop	r12
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <timer_init>:

void timer_init(){
	TCCR1B |= (1<<CS11) | (1<<CS10); // 64 prescaler (Use a low prescaler to make the Count more accurate)
 7f0:	8e b5       	in	r24, 0x2e	; 46
 7f2:	83 60       	ori	r24, 0x03	; 3
 7f4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= 1<<WGM12;				// CTC (compare output mode)
 7f6:	8e b5       	in	r24, 0x2e	; 46
 7f8:	88 60       	ori	r24, 0x08	; 8
 7fa:	8e bd       	out	0x2e, r24	; 46
	
	// Count which is equivalent to 1 sec:
	// 1 * F_CPU/prescaler
	uint16_t Count = 15625;
	OCR1A = Count;		// Put value in Output Compare Register
 7fc:	89 e0       	ldi	r24, 0x09	; 9
 7fe:	9d e3       	ldi	r25, 0x3D	; 61
 800:	9b bd       	out	0x2b, r25	; 43
 802:	8a bd       	out	0x2a, r24	; 42
	TIMSK &= ~(1 << OCIE1A); // Disable Output Compare A Match Interrupt
 804:	89 b7       	in	r24, 0x39	; 57
 806:	8f 7e       	andi	r24, 0xEF	; 239
 808:	89 bf       	out	0x39, r24	; 57
 80a:	08 95       	ret

0000080c <main>:


int main(void)
{
	
	GICR |= 1 << INT1; // Enable INT1 (Alarm interrupt)
 80c:	8b b7       	in	r24, 0x3b	; 59
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 812:	85 b7       	in	r24, 0x35	; 53
 814:	88 60       	ori	r24, 0x08	; 8
 816:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10); //Detect falling edge
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	8b 7f       	andi	r24, 0xFB	; 251
 81c:	85 bf       	out	0x35, r24	; 53
	
    I2C_Init();
 81e:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Init>
    RTC_Clock_Write(7,59,50);	// Set the time now
 822:	42 e3       	ldi	r20, 0x32	; 50
 824:	6b e3       	ldi	r22, 0x3B	; 59
 826:	87 e0       	ldi	r24, 0x07	; 7
 828:	0e 94 50 01 	call	0x2a0	; 0x2a0 <RTC_Clock_Write>
    RTC_Date_Write(1,5,6,24); // Set data now. Year is the 2 last digits in the year
 82c:	28 e1       	ldi	r18, 0x18	; 24
 82e:	46 e0       	ldi	r20, 0x06	; 6
 830:	65 e0       	ldi	r22, 0x05	; 5
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 71 01 	call	0x2e2	; 0x2e2 <RTC_Date_Write>
	
	RTC_Alarm_Init();
 838:	0e 94 98 01 	call	0x330	; 0x330 <RTC_Alarm_Init>
	RTC_Alarm1_Time(7,59,58);		// Wake up 2 second before start of day, to be ready
 83c:	4a e3       	ldi	r20, 0x3A	; 58
 83e:	6b e3       	ldi	r22, 0x3B	; 59
 840:	87 e0       	ldi	r24, 0x07	; 7
 842:	0e 94 a4 01 	call	0x348	; 0x348 <RTC_Alarm1_Time>
    
    LCD_Init();
 846:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Init>
	timer_init();
 84a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <timer_init>
	USART_Init(USART_BAUDRATE);		// Intitialize USART with spesified baud rate
 84e:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <USART_BAUDRATE>
 852:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <USART_BAUDRATE+0x1>
 856:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <USART_BAUDRATE+0x2>
 85a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <USART_BAUDRATE+0x3>
 85e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <USART_Init>
	LCD_String_xy(0,0,"Init");
 862:	43 eb       	ldi	r20, 0xB3	; 179
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 80 00 	call	0x100	; 0x100 <LCD_String_xy>
	sei();
 86e:	78 94       	sei
 870:	ff cf       	rjmp	.-2      	; 0x870 <__stack+0x11>

00000872 <__divmodhi4>:
 872:	97 fb       	bst	r25, 7
 874:	07 2e       	mov	r0, r23
 876:	16 f4       	brtc	.+4      	; 0x87c <__divmodhi4+0xa>
 878:	00 94       	com	r0
 87a:	07 d0       	rcall	.+14     	; 0x88a <__divmodhi4_neg1>
 87c:	77 fd       	sbrc	r23, 7
 87e:	09 d0       	rcall	.+18     	; 0x892 <__divmodhi4_neg2>
 880:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodhi4>
 884:	07 fc       	sbrc	r0, 7
 886:	05 d0       	rcall	.+10     	; 0x892 <__divmodhi4_neg2>
 888:	3e f4       	brtc	.+14     	; 0x898 <__divmodhi4_exit>

0000088a <__divmodhi4_neg1>:
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__divmodhi4_neg2>:
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255

00000898 <__divmodhi4_exit>:
 898:	08 95       	ret

0000089a <__udivmodsi4>:
 89a:	a1 e2       	ldi	r26, 0x21	; 33
 89c:	1a 2e       	mov	r1, r26
 89e:	aa 1b       	sub	r26, r26
 8a0:	bb 1b       	sub	r27, r27
 8a2:	fd 01       	movw	r30, r26
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <__udivmodsi4_ep>

000008a6 <__udivmodsi4_loop>:
 8a6:	aa 1f       	adc	r26, r26
 8a8:	bb 1f       	adc	r27, r27
 8aa:	ee 1f       	adc	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	a2 17       	cp	r26, r18
 8b0:	b3 07       	cpc	r27, r19
 8b2:	e4 07       	cpc	r30, r20
 8b4:	f5 07       	cpc	r31, r21
 8b6:	20 f0       	brcs	.+8      	; 0x8c0 <__udivmodsi4_ep>
 8b8:	a2 1b       	sub	r26, r18
 8ba:	b3 0b       	sbc	r27, r19
 8bc:	e4 0b       	sbc	r30, r20
 8be:	f5 0b       	sbc	r31, r21

000008c0 <__udivmodsi4_ep>:
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	1a 94       	dec	r1
 8ca:	69 f7       	brne	.-38     	; 0x8a6 <__udivmodsi4_loop>
 8cc:	60 95       	com	r22
 8ce:	70 95       	com	r23
 8d0:	80 95       	com	r24
 8d2:	90 95       	com	r25
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	bd 01       	movw	r22, r26
 8da:	cf 01       	movw	r24, r30
 8dc:	08 95       	ret

000008de <__udivmodhi4>:
 8de:	aa 1b       	sub	r26, r26
 8e0:	bb 1b       	sub	r27, r27
 8e2:	51 e1       	ldi	r21, 0x11	; 17
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__udivmodhi4_ep>

000008e6 <__udivmodhi4_loop>:
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	a6 17       	cp	r26, r22
 8ec:	b7 07       	cpc	r27, r23
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__udivmodhi4_ep>
 8f0:	a6 1b       	sub	r26, r22
 8f2:	b7 0b       	sbc	r27, r23

000008f4 <__udivmodhi4_ep>:
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	5a 95       	dec	r21
 8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__udivmodhi4_loop>
 8fc:	80 95       	com	r24
 8fe:	90 95       	com	r25
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	08 95       	ret

00000906 <sprintf>:
 906:	ae e0       	ldi	r26, 0x0E	; 14
 908:	b0 e0       	ldi	r27, 0x00	; 0
 90a:	e9 e8       	ldi	r30, 0x89	; 137
 90c:	f4 e0       	ldi	r31, 0x04	; 4
 90e:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__prologue_saves__+0x1c>
 912:	0d 89       	ldd	r16, Y+21	; 0x15
 914:	1e 89       	ldd	r17, Y+22	; 0x16
 916:	86 e0       	ldi	r24, 0x06	; 6
 918:	8c 83       	std	Y+4, r24	; 0x04
 91a:	1a 83       	std	Y+2, r17	; 0x02
 91c:	09 83       	std	Y+1, r16	; 0x01
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	9f e7       	ldi	r25, 0x7F	; 127
 922:	9e 83       	std	Y+6, r25	; 0x06
 924:	8d 83       	std	Y+5, r24	; 0x05
 926:	ae 01       	movw	r20, r28
 928:	47 5e       	subi	r20, 0xE7	; 231
 92a:	5f 4f       	sbci	r21, 0xFF	; 255
 92c:	6f 89       	ldd	r22, Y+23	; 0x17
 92e:	78 8d       	ldd	r23, Y+24	; 0x18
 930:	ce 01       	movw	r24, r28
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	0e 94 a5 04 	call	0x94a	; 0x94a <vfprintf>
 938:	ef 81       	ldd	r30, Y+7	; 0x07
 93a:	f8 85       	ldd	r31, Y+8	; 0x08
 93c:	e0 0f       	add	r30, r16
 93e:	f1 1f       	adc	r31, r17
 940:	10 82       	st	Z, r1
 942:	2e 96       	adiw	r28, 0x0e	; 14
 944:	e4 e0       	ldi	r30, 0x04	; 4
 946:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__epilogue_restores__+0x1c>

0000094a <vfprintf>:
 94a:	ab e0       	ldi	r26, 0x0B	; 11
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	eb ea       	ldi	r30, 0xAB	; 171
 950:	f4 e0       	ldi	r31, 0x04	; 4
 952:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__prologue_saves__>
 956:	6c 01       	movw	r12, r24
 958:	7b 01       	movw	r14, r22
 95a:	8a 01       	movw	r16, r20
 95c:	fc 01       	movw	r30, r24
 95e:	17 82       	std	Z+7, r1	; 0x07
 960:	16 82       	std	Z+6, r1	; 0x06
 962:	83 81       	ldd	r24, Z+3	; 0x03
 964:	81 ff       	sbrs	r24, 1
 966:	cc c1       	rjmp	.+920    	; 0xd00 <vfprintf+0x3b6>
 968:	ce 01       	movw	r24, r28
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	3c 01       	movw	r6, r24
 96e:	f6 01       	movw	r30, r12
 970:	93 81       	ldd	r25, Z+3	; 0x03
 972:	f7 01       	movw	r30, r14
 974:	93 fd       	sbrc	r25, 3
 976:	85 91       	lpm	r24, Z+
 978:	93 ff       	sbrs	r25, 3
 97a:	81 91       	ld	r24, Z+
 97c:	7f 01       	movw	r14, r30
 97e:	88 23       	and	r24, r24
 980:	09 f4       	brne	.+2      	; 0x984 <vfprintf+0x3a>
 982:	ba c1       	rjmp	.+884    	; 0xcf8 <vfprintf+0x3ae>
 984:	85 32       	cpi	r24, 0x25	; 37
 986:	39 f4       	brne	.+14     	; 0x996 <vfprintf+0x4c>
 988:	93 fd       	sbrc	r25, 3
 98a:	85 91       	lpm	r24, Z+
 98c:	93 ff       	sbrs	r25, 3
 98e:	81 91       	ld	r24, Z+
 990:	7f 01       	movw	r14, r30
 992:	85 32       	cpi	r24, 0x25	; 37
 994:	29 f4       	brne	.+10     	; 0x9a0 <vfprintf+0x56>
 996:	b6 01       	movw	r22, r12
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 99e:	e7 cf       	rjmp	.-50     	; 0x96e <vfprintf+0x24>
 9a0:	91 2c       	mov	r9, r1
 9a2:	21 2c       	mov	r2, r1
 9a4:	31 2c       	mov	r3, r1
 9a6:	ff e1       	ldi	r31, 0x1F	; 31
 9a8:	f3 15       	cp	r31, r3
 9aa:	d8 f0       	brcs	.+54     	; 0x9e2 <vfprintf+0x98>
 9ac:	8b 32       	cpi	r24, 0x2B	; 43
 9ae:	79 f0       	breq	.+30     	; 0x9ce <vfprintf+0x84>
 9b0:	38 f4       	brcc	.+14     	; 0x9c0 <vfprintf+0x76>
 9b2:	80 32       	cpi	r24, 0x20	; 32
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <vfprintf+0x8a>
 9b6:	83 32       	cpi	r24, 0x23	; 35
 9b8:	a1 f4       	brne	.+40     	; 0x9e2 <vfprintf+0x98>
 9ba:	23 2d       	mov	r18, r3
 9bc:	20 61       	ori	r18, 0x10	; 16
 9be:	1d c0       	rjmp	.+58     	; 0x9fa <vfprintf+0xb0>
 9c0:	8d 32       	cpi	r24, 0x2D	; 45
 9c2:	61 f0       	breq	.+24     	; 0x9dc <vfprintf+0x92>
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	69 f4       	brne	.+26     	; 0x9e2 <vfprintf+0x98>
 9c8:	23 2d       	mov	r18, r3
 9ca:	21 60       	ori	r18, 0x01	; 1
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <vfprintf+0xb0>
 9ce:	83 2d       	mov	r24, r3
 9d0:	82 60       	ori	r24, 0x02	; 2
 9d2:	38 2e       	mov	r3, r24
 9d4:	e3 2d       	mov	r30, r3
 9d6:	e4 60       	ori	r30, 0x04	; 4
 9d8:	3e 2e       	mov	r3, r30
 9da:	2a c0       	rjmp	.+84     	; 0xa30 <vfprintf+0xe6>
 9dc:	f3 2d       	mov	r31, r3
 9de:	f8 60       	ori	r31, 0x08	; 8
 9e0:	1d c0       	rjmp	.+58     	; 0xa1c <vfprintf+0xd2>
 9e2:	37 fc       	sbrc	r3, 7
 9e4:	2d c0       	rjmp	.+90     	; 0xa40 <vfprintf+0xf6>
 9e6:	20 ed       	ldi	r18, 0xD0	; 208
 9e8:	28 0f       	add	r18, r24
 9ea:	2a 30       	cpi	r18, 0x0A	; 10
 9ec:	40 f0       	brcs	.+16     	; 0x9fe <vfprintf+0xb4>
 9ee:	8e 32       	cpi	r24, 0x2E	; 46
 9f0:	b9 f4       	brne	.+46     	; 0xa20 <vfprintf+0xd6>
 9f2:	36 fc       	sbrc	r3, 6
 9f4:	81 c1       	rjmp	.+770    	; 0xcf8 <vfprintf+0x3ae>
 9f6:	23 2d       	mov	r18, r3
 9f8:	20 64       	ori	r18, 0x40	; 64
 9fa:	32 2e       	mov	r3, r18
 9fc:	19 c0       	rjmp	.+50     	; 0xa30 <vfprintf+0xe6>
 9fe:	36 fe       	sbrs	r3, 6
 a00:	06 c0       	rjmp	.+12     	; 0xa0e <vfprintf+0xc4>
 a02:	8a e0       	ldi	r24, 0x0A	; 10
 a04:	98 9e       	mul	r9, r24
 a06:	20 0d       	add	r18, r0
 a08:	11 24       	eor	r1, r1
 a0a:	92 2e       	mov	r9, r18
 a0c:	11 c0       	rjmp	.+34     	; 0xa30 <vfprintf+0xe6>
 a0e:	ea e0       	ldi	r30, 0x0A	; 10
 a10:	2e 9e       	mul	r2, r30
 a12:	20 0d       	add	r18, r0
 a14:	11 24       	eor	r1, r1
 a16:	22 2e       	mov	r2, r18
 a18:	f3 2d       	mov	r31, r3
 a1a:	f0 62       	ori	r31, 0x20	; 32
 a1c:	3f 2e       	mov	r3, r31
 a1e:	08 c0       	rjmp	.+16     	; 0xa30 <vfprintf+0xe6>
 a20:	8c 36       	cpi	r24, 0x6C	; 108
 a22:	21 f4       	brne	.+8      	; 0xa2c <vfprintf+0xe2>
 a24:	83 2d       	mov	r24, r3
 a26:	80 68       	ori	r24, 0x80	; 128
 a28:	38 2e       	mov	r3, r24
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <vfprintf+0xe6>
 a2c:	88 36       	cpi	r24, 0x68	; 104
 a2e:	41 f4       	brne	.+16     	; 0xa40 <vfprintf+0xf6>
 a30:	f7 01       	movw	r30, r14
 a32:	93 fd       	sbrc	r25, 3
 a34:	85 91       	lpm	r24, Z+
 a36:	93 ff       	sbrs	r25, 3
 a38:	81 91       	ld	r24, Z+
 a3a:	7f 01       	movw	r14, r30
 a3c:	81 11       	cpse	r24, r1
 a3e:	b3 cf       	rjmp	.-154    	; 0x9a6 <vfprintf+0x5c>
 a40:	98 2f       	mov	r25, r24
 a42:	9f 7d       	andi	r25, 0xDF	; 223
 a44:	95 54       	subi	r25, 0x45	; 69
 a46:	93 30       	cpi	r25, 0x03	; 3
 a48:	28 f4       	brcc	.+10     	; 0xa54 <vfprintf+0x10a>
 a4a:	0c 5f       	subi	r16, 0xFC	; 252
 a4c:	1f 4f       	sbci	r17, 0xFF	; 255
 a4e:	9f e3       	ldi	r25, 0x3F	; 63
 a50:	99 83       	std	Y+1, r25	; 0x01
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <vfprintf+0x124>
 a54:	83 36       	cpi	r24, 0x63	; 99
 a56:	31 f0       	breq	.+12     	; 0xa64 <vfprintf+0x11a>
 a58:	83 37       	cpi	r24, 0x73	; 115
 a5a:	71 f0       	breq	.+28     	; 0xa78 <vfprintf+0x12e>
 a5c:	83 35       	cpi	r24, 0x53	; 83
 a5e:	09 f0       	breq	.+2      	; 0xa62 <vfprintf+0x118>
 a60:	59 c0       	rjmp	.+178    	; 0xb14 <vfprintf+0x1ca>
 a62:	21 c0       	rjmp	.+66     	; 0xaa6 <vfprintf+0x15c>
 a64:	f8 01       	movw	r30, r16
 a66:	80 81       	ld	r24, Z
 a68:	89 83       	std	Y+1, r24	; 0x01
 a6a:	0e 5f       	subi	r16, 0xFE	; 254
 a6c:	1f 4f       	sbci	r17, 0xFF	; 255
 a6e:	88 24       	eor	r8, r8
 a70:	83 94       	inc	r8
 a72:	91 2c       	mov	r9, r1
 a74:	53 01       	movw	r10, r6
 a76:	13 c0       	rjmp	.+38     	; 0xa9e <vfprintf+0x154>
 a78:	28 01       	movw	r4, r16
 a7a:	f2 e0       	ldi	r31, 0x02	; 2
 a7c:	4f 0e       	add	r4, r31
 a7e:	51 1c       	adc	r5, r1
 a80:	f8 01       	movw	r30, r16
 a82:	a0 80       	ld	r10, Z
 a84:	b1 80       	ldd	r11, Z+1	; 0x01
 a86:	36 fe       	sbrs	r3, 6
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <vfprintf+0x146>
 a8a:	69 2d       	mov	r22, r9
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <vfprintf+0x14a>
 a90:	6f ef       	ldi	r22, 0xFF	; 255
 a92:	7f ef       	ldi	r23, 0xFF	; 255
 a94:	c5 01       	movw	r24, r10
 a96:	0e 94 91 06 	call	0xd22	; 0xd22 <strnlen>
 a9a:	4c 01       	movw	r8, r24
 a9c:	82 01       	movw	r16, r4
 a9e:	f3 2d       	mov	r31, r3
 aa0:	ff 77       	andi	r31, 0x7F	; 127
 aa2:	3f 2e       	mov	r3, r31
 aa4:	16 c0       	rjmp	.+44     	; 0xad2 <vfprintf+0x188>
 aa6:	28 01       	movw	r4, r16
 aa8:	22 e0       	ldi	r18, 0x02	; 2
 aaa:	42 0e       	add	r4, r18
 aac:	51 1c       	adc	r5, r1
 aae:	f8 01       	movw	r30, r16
 ab0:	a0 80       	ld	r10, Z
 ab2:	b1 80       	ldd	r11, Z+1	; 0x01
 ab4:	36 fe       	sbrs	r3, 6
 ab6:	03 c0       	rjmp	.+6      	; 0xabe <vfprintf+0x174>
 ab8:	69 2d       	mov	r22, r9
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <vfprintf+0x178>
 abe:	6f ef       	ldi	r22, 0xFF	; 255
 ac0:	7f ef       	ldi	r23, 0xFF	; 255
 ac2:	c5 01       	movw	r24, r10
 ac4:	0e 94 86 06 	call	0xd0c	; 0xd0c <strnlen_P>
 ac8:	4c 01       	movw	r8, r24
 aca:	f3 2d       	mov	r31, r3
 acc:	f0 68       	ori	r31, 0x80	; 128
 ace:	3f 2e       	mov	r3, r31
 ad0:	82 01       	movw	r16, r4
 ad2:	33 fc       	sbrc	r3, 3
 ad4:	1b c0       	rjmp	.+54     	; 0xb0c <vfprintf+0x1c2>
 ad6:	82 2d       	mov	r24, r2
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	88 16       	cp	r8, r24
 adc:	99 06       	cpc	r9, r25
 ade:	b0 f4       	brcc	.+44     	; 0xb0c <vfprintf+0x1c2>
 ae0:	b6 01       	movw	r22, r12
 ae2:	80 e2       	ldi	r24, 0x20	; 32
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 aea:	2a 94       	dec	r2
 aec:	f4 cf       	rjmp	.-24     	; 0xad6 <vfprintf+0x18c>
 aee:	f5 01       	movw	r30, r10
 af0:	37 fc       	sbrc	r3, 7
 af2:	85 91       	lpm	r24, Z+
 af4:	37 fe       	sbrs	r3, 7
 af6:	81 91       	ld	r24, Z+
 af8:	5f 01       	movw	r10, r30
 afa:	b6 01       	movw	r22, r12
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 b02:	21 10       	cpse	r2, r1
 b04:	2a 94       	dec	r2
 b06:	21 e0       	ldi	r18, 0x01	; 1
 b08:	82 1a       	sub	r8, r18
 b0a:	91 08       	sbc	r9, r1
 b0c:	81 14       	cp	r8, r1
 b0e:	91 04       	cpc	r9, r1
 b10:	71 f7       	brne	.-36     	; 0xaee <vfprintf+0x1a4>
 b12:	e8 c0       	rjmp	.+464    	; 0xce4 <vfprintf+0x39a>
 b14:	84 36       	cpi	r24, 0x64	; 100
 b16:	11 f0       	breq	.+4      	; 0xb1c <vfprintf+0x1d2>
 b18:	89 36       	cpi	r24, 0x69	; 105
 b1a:	41 f5       	brne	.+80     	; 0xb6c <vfprintf+0x222>
 b1c:	f8 01       	movw	r30, r16
 b1e:	37 fe       	sbrs	r3, 7
 b20:	07 c0       	rjmp	.+14     	; 0xb30 <vfprintf+0x1e6>
 b22:	60 81       	ld	r22, Z
 b24:	71 81       	ldd	r23, Z+1	; 0x01
 b26:	82 81       	ldd	r24, Z+2	; 0x02
 b28:	93 81       	ldd	r25, Z+3	; 0x03
 b2a:	0c 5f       	subi	r16, 0xFC	; 252
 b2c:	1f 4f       	sbci	r17, 0xFF	; 255
 b2e:	08 c0       	rjmp	.+16     	; 0xb40 <vfprintf+0x1f6>
 b30:	60 81       	ld	r22, Z
 b32:	71 81       	ldd	r23, Z+1	; 0x01
 b34:	07 2e       	mov	r0, r23
 b36:	00 0c       	add	r0, r0
 b38:	88 0b       	sbc	r24, r24
 b3a:	99 0b       	sbc	r25, r25
 b3c:	0e 5f       	subi	r16, 0xFE	; 254
 b3e:	1f 4f       	sbci	r17, 0xFF	; 255
 b40:	f3 2d       	mov	r31, r3
 b42:	ff 76       	andi	r31, 0x6F	; 111
 b44:	3f 2e       	mov	r3, r31
 b46:	97 ff       	sbrs	r25, 7
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <vfprintf+0x212>
 b4a:	90 95       	com	r25
 b4c:	80 95       	com	r24
 b4e:	70 95       	com	r23
 b50:	61 95       	neg	r22
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	f0 68       	ori	r31, 0x80	; 128
 b5a:	3f 2e       	mov	r3, r31
 b5c:	2a e0       	ldi	r18, 0x0A	; 10
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	a3 01       	movw	r20, r6
 b62:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__ultoa_invert>
 b66:	88 2e       	mov	r8, r24
 b68:	86 18       	sub	r8, r6
 b6a:	45 c0       	rjmp	.+138    	; 0xbf6 <vfprintf+0x2ac>
 b6c:	85 37       	cpi	r24, 0x75	; 117
 b6e:	31 f4       	brne	.+12     	; 0xb7c <vfprintf+0x232>
 b70:	23 2d       	mov	r18, r3
 b72:	2f 7e       	andi	r18, 0xEF	; 239
 b74:	b2 2e       	mov	r11, r18
 b76:	2a e0       	ldi	r18, 0x0A	; 10
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	25 c0       	rjmp	.+74     	; 0xbc6 <vfprintf+0x27c>
 b7c:	93 2d       	mov	r25, r3
 b7e:	99 7f       	andi	r25, 0xF9	; 249
 b80:	b9 2e       	mov	r11, r25
 b82:	8f 36       	cpi	r24, 0x6F	; 111
 b84:	c1 f0       	breq	.+48     	; 0xbb6 <vfprintf+0x26c>
 b86:	18 f4       	brcc	.+6      	; 0xb8e <vfprintf+0x244>
 b88:	88 35       	cpi	r24, 0x58	; 88
 b8a:	79 f0       	breq	.+30     	; 0xbaa <vfprintf+0x260>
 b8c:	b5 c0       	rjmp	.+362    	; 0xcf8 <vfprintf+0x3ae>
 b8e:	80 37       	cpi	r24, 0x70	; 112
 b90:	19 f0       	breq	.+6      	; 0xb98 <vfprintf+0x24e>
 b92:	88 37       	cpi	r24, 0x78	; 120
 b94:	21 f0       	breq	.+8      	; 0xb9e <vfprintf+0x254>
 b96:	b0 c0       	rjmp	.+352    	; 0xcf8 <vfprintf+0x3ae>
 b98:	e9 2f       	mov	r30, r25
 b9a:	e0 61       	ori	r30, 0x10	; 16
 b9c:	be 2e       	mov	r11, r30
 b9e:	b4 fe       	sbrs	r11, 4
 ba0:	0d c0       	rjmp	.+26     	; 0xbbc <vfprintf+0x272>
 ba2:	fb 2d       	mov	r31, r11
 ba4:	f4 60       	ori	r31, 0x04	; 4
 ba6:	bf 2e       	mov	r11, r31
 ba8:	09 c0       	rjmp	.+18     	; 0xbbc <vfprintf+0x272>
 baa:	34 fe       	sbrs	r3, 4
 bac:	0a c0       	rjmp	.+20     	; 0xbc2 <vfprintf+0x278>
 bae:	29 2f       	mov	r18, r25
 bb0:	26 60       	ori	r18, 0x06	; 6
 bb2:	b2 2e       	mov	r11, r18
 bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <vfprintf+0x278>
 bb6:	28 e0       	ldi	r18, 0x08	; 8
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	05 c0       	rjmp	.+10     	; 0xbc6 <vfprintf+0x27c>
 bbc:	20 e1       	ldi	r18, 0x10	; 16
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <vfprintf+0x27c>
 bc2:	20 e1       	ldi	r18, 0x10	; 16
 bc4:	32 e0       	ldi	r19, 0x02	; 2
 bc6:	f8 01       	movw	r30, r16
 bc8:	b7 fe       	sbrs	r11, 7
 bca:	07 c0       	rjmp	.+14     	; 0xbda <vfprintf+0x290>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	82 81       	ldd	r24, Z+2	; 0x02
 bd2:	93 81       	ldd	r25, Z+3	; 0x03
 bd4:	0c 5f       	subi	r16, 0xFC	; 252
 bd6:	1f 4f       	sbci	r17, 0xFF	; 255
 bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <vfprintf+0x29c>
 bda:	60 81       	ld	r22, Z
 bdc:	71 81       	ldd	r23, Z+1	; 0x01
 bde:	80 e0       	ldi	r24, 0x00	; 0
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 5f       	subi	r16, 0xFE	; 254
 be4:	1f 4f       	sbci	r17, 0xFF	; 255
 be6:	a3 01       	movw	r20, r6
 be8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__ultoa_invert>
 bec:	88 2e       	mov	r8, r24
 bee:	86 18       	sub	r8, r6
 bf0:	fb 2d       	mov	r31, r11
 bf2:	ff 77       	andi	r31, 0x7F	; 127
 bf4:	3f 2e       	mov	r3, r31
 bf6:	36 fe       	sbrs	r3, 6
 bf8:	0d c0       	rjmp	.+26     	; 0xc14 <vfprintf+0x2ca>
 bfa:	23 2d       	mov	r18, r3
 bfc:	2e 7f       	andi	r18, 0xFE	; 254
 bfe:	a2 2e       	mov	r10, r18
 c00:	89 14       	cp	r8, r9
 c02:	58 f4       	brcc	.+22     	; 0xc1a <vfprintf+0x2d0>
 c04:	34 fe       	sbrs	r3, 4
 c06:	0b c0       	rjmp	.+22     	; 0xc1e <vfprintf+0x2d4>
 c08:	32 fc       	sbrc	r3, 2
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <vfprintf+0x2d4>
 c0c:	83 2d       	mov	r24, r3
 c0e:	8e 7e       	andi	r24, 0xEE	; 238
 c10:	a8 2e       	mov	r10, r24
 c12:	05 c0       	rjmp	.+10     	; 0xc1e <vfprintf+0x2d4>
 c14:	b8 2c       	mov	r11, r8
 c16:	a3 2c       	mov	r10, r3
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <vfprintf+0x2d6>
 c1a:	b8 2c       	mov	r11, r8
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <vfprintf+0x2d6>
 c1e:	b9 2c       	mov	r11, r9
 c20:	a4 fe       	sbrs	r10, 4
 c22:	0f c0       	rjmp	.+30     	; 0xc42 <vfprintf+0x2f8>
 c24:	fe 01       	movw	r30, r28
 c26:	e8 0d       	add	r30, r8
 c28:	f1 1d       	adc	r31, r1
 c2a:	80 81       	ld	r24, Z
 c2c:	80 33       	cpi	r24, 0x30	; 48
 c2e:	21 f4       	brne	.+8      	; 0xc38 <vfprintf+0x2ee>
 c30:	9a 2d       	mov	r25, r10
 c32:	99 7e       	andi	r25, 0xE9	; 233
 c34:	a9 2e       	mov	r10, r25
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <vfprintf+0x300>
 c38:	a2 fe       	sbrs	r10, 2
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x2fe>
 c3c:	b3 94       	inc	r11
 c3e:	b3 94       	inc	r11
 c40:	04 c0       	rjmp	.+8      	; 0xc4a <vfprintf+0x300>
 c42:	8a 2d       	mov	r24, r10
 c44:	86 78       	andi	r24, 0x86	; 134
 c46:	09 f0       	breq	.+2      	; 0xc4a <vfprintf+0x300>
 c48:	b3 94       	inc	r11
 c4a:	a3 fc       	sbrc	r10, 3
 c4c:	11 c0       	rjmp	.+34     	; 0xc70 <vfprintf+0x326>
 c4e:	a0 fe       	sbrs	r10, 0
 c50:	06 c0       	rjmp	.+12     	; 0xc5e <vfprintf+0x314>
 c52:	b2 14       	cp	r11, r2
 c54:	88 f4       	brcc	.+34     	; 0xc78 <vfprintf+0x32e>
 c56:	28 0c       	add	r2, r8
 c58:	92 2c       	mov	r9, r2
 c5a:	9b 18       	sub	r9, r11
 c5c:	0e c0       	rjmp	.+28     	; 0xc7a <vfprintf+0x330>
 c5e:	b2 14       	cp	r11, r2
 c60:	60 f4       	brcc	.+24     	; 0xc7a <vfprintf+0x330>
 c62:	b6 01       	movw	r22, r12
 c64:	80 e2       	ldi	r24, 0x20	; 32
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 c6c:	b3 94       	inc	r11
 c6e:	f7 cf       	rjmp	.-18     	; 0xc5e <vfprintf+0x314>
 c70:	b2 14       	cp	r11, r2
 c72:	18 f4       	brcc	.+6      	; 0xc7a <vfprintf+0x330>
 c74:	2b 18       	sub	r2, r11
 c76:	02 c0       	rjmp	.+4      	; 0xc7c <vfprintf+0x332>
 c78:	98 2c       	mov	r9, r8
 c7a:	21 2c       	mov	r2, r1
 c7c:	a4 fe       	sbrs	r10, 4
 c7e:	10 c0       	rjmp	.+32     	; 0xca0 <vfprintf+0x356>
 c80:	b6 01       	movw	r22, r12
 c82:	80 e3       	ldi	r24, 0x30	; 48
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 c8a:	a2 fe       	sbrs	r10, 2
 c8c:	17 c0       	rjmp	.+46     	; 0xcbc <vfprintf+0x372>
 c8e:	a1 fc       	sbrc	r10, 1
 c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x34e>
 c92:	88 e7       	ldi	r24, 0x78	; 120
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x352>
 c98:	88 e5       	ldi	r24, 0x58	; 88
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	b6 01       	movw	r22, r12
 c9e:	0c c0       	rjmp	.+24     	; 0xcb8 <vfprintf+0x36e>
 ca0:	8a 2d       	mov	r24, r10
 ca2:	86 78       	andi	r24, 0x86	; 134
 ca4:	59 f0       	breq	.+22     	; 0xcbc <vfprintf+0x372>
 ca6:	a1 fe       	sbrs	r10, 1
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x364>
 caa:	8b e2       	ldi	r24, 0x2B	; 43
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <vfprintf+0x366>
 cae:	80 e2       	ldi	r24, 0x20	; 32
 cb0:	a7 fc       	sbrc	r10, 7
 cb2:	8d e2       	ldi	r24, 0x2D	; 45
 cb4:	b6 01       	movw	r22, r12
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 cbc:	89 14       	cp	r8, r9
 cbe:	38 f4       	brcc	.+14     	; 0xcce <vfprintf+0x384>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e3       	ldi	r24, 0x30	; 48
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 cca:	9a 94       	dec	r9
 ccc:	f7 cf       	rjmp	.-18     	; 0xcbc <vfprintf+0x372>
 cce:	8a 94       	dec	r8
 cd0:	f3 01       	movw	r30, r6
 cd2:	e8 0d       	add	r30, r8
 cd4:	f1 1d       	adc	r31, r1
 cd6:	80 81       	ld	r24, Z
 cd8:	b6 01       	movw	r22, r12
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 ce0:	81 10       	cpse	r8, r1
 ce2:	f5 cf       	rjmp	.-22     	; 0xcce <vfprintf+0x384>
 ce4:	22 20       	and	r2, r2
 ce6:	09 f4       	brne	.+2      	; 0xcea <vfprintf+0x3a0>
 ce8:	42 ce       	rjmp	.-892    	; 0x96e <vfprintf+0x24>
 cea:	b6 01       	movw	r22, r12
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 9c 06 	call	0xd38	; 0xd38 <fputc>
 cf4:	2a 94       	dec	r2
 cf6:	f6 cf       	rjmp	.-20     	; 0xce4 <vfprintf+0x39a>
 cf8:	f6 01       	movw	r30, r12
 cfa:	86 81       	ldd	r24, Z+6	; 0x06
 cfc:	97 81       	ldd	r25, Z+7	; 0x07
 cfe:	02 c0       	rjmp	.+4      	; 0xd04 <vfprintf+0x3ba>
 d00:	8f ef       	ldi	r24, 0xFF	; 255
 d02:	9f ef       	ldi	r25, 0xFF	; 255
 d04:	2b 96       	adiw	r28, 0x0b	; 11
 d06:	e2 e1       	ldi	r30, 0x12	; 18
 d08:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__epilogue_restores__>

00000d0c <strnlen_P>:
 d0c:	fc 01       	movw	r30, r24
 d0e:	05 90       	lpm	r0, Z+
 d10:	61 50       	subi	r22, 0x01	; 1
 d12:	70 40       	sbci	r23, 0x00	; 0
 d14:	01 10       	cpse	r0, r1
 d16:	d8 f7       	brcc	.-10     	; 0xd0e <strnlen_P+0x2>
 d18:	80 95       	com	r24
 d1a:	90 95       	com	r25
 d1c:	8e 0f       	add	r24, r30
 d1e:	9f 1f       	adc	r25, r31
 d20:	08 95       	ret

00000d22 <strnlen>:
 d22:	fc 01       	movw	r30, r24
 d24:	61 50       	subi	r22, 0x01	; 1
 d26:	70 40       	sbci	r23, 0x00	; 0
 d28:	01 90       	ld	r0, Z+
 d2a:	01 10       	cpse	r0, r1
 d2c:	d8 f7       	brcc	.-10     	; 0xd24 <strnlen+0x2>
 d2e:	80 95       	com	r24
 d30:	90 95       	com	r25
 d32:	8e 0f       	add	r24, r30
 d34:	9f 1f       	adc	r25, r31
 d36:	08 95       	ret

00000d38 <fputc>:
 d38:	0f 93       	push	r16
 d3a:	1f 93       	push	r17
 d3c:	cf 93       	push	r28
 d3e:	df 93       	push	r29
 d40:	fb 01       	movw	r30, r22
 d42:	23 81       	ldd	r18, Z+3	; 0x03
 d44:	21 fd       	sbrc	r18, 1
 d46:	03 c0       	rjmp	.+6      	; 0xd4e <fputc+0x16>
 d48:	8f ef       	ldi	r24, 0xFF	; 255
 d4a:	9f ef       	ldi	r25, 0xFF	; 255
 d4c:	2c c0       	rjmp	.+88     	; 0xda6 <fputc+0x6e>
 d4e:	22 ff       	sbrs	r18, 2
 d50:	16 c0       	rjmp	.+44     	; 0xd7e <fputc+0x46>
 d52:	46 81       	ldd	r20, Z+6	; 0x06
 d54:	57 81       	ldd	r21, Z+7	; 0x07
 d56:	24 81       	ldd	r18, Z+4	; 0x04
 d58:	35 81       	ldd	r19, Z+5	; 0x05
 d5a:	42 17       	cp	r20, r18
 d5c:	53 07       	cpc	r21, r19
 d5e:	44 f4       	brge	.+16     	; 0xd70 <fputc+0x38>
 d60:	a0 81       	ld	r26, Z
 d62:	b1 81       	ldd	r27, Z+1	; 0x01
 d64:	9d 01       	movw	r18, r26
 d66:	2f 5f       	subi	r18, 0xFF	; 255
 d68:	3f 4f       	sbci	r19, 0xFF	; 255
 d6a:	31 83       	std	Z+1, r19	; 0x01
 d6c:	20 83       	st	Z, r18
 d6e:	8c 93       	st	X, r24
 d70:	26 81       	ldd	r18, Z+6	; 0x06
 d72:	37 81       	ldd	r19, Z+7	; 0x07
 d74:	2f 5f       	subi	r18, 0xFF	; 255
 d76:	3f 4f       	sbci	r19, 0xFF	; 255
 d78:	37 83       	std	Z+7, r19	; 0x07
 d7a:	26 83       	std	Z+6, r18	; 0x06
 d7c:	14 c0       	rjmp	.+40     	; 0xda6 <fputc+0x6e>
 d7e:	8b 01       	movw	r16, r22
 d80:	ec 01       	movw	r28, r24
 d82:	fb 01       	movw	r30, r22
 d84:	00 84       	ldd	r0, Z+8	; 0x08
 d86:	f1 85       	ldd	r31, Z+9	; 0x09
 d88:	e0 2d       	mov	r30, r0
 d8a:	09 95       	icall
 d8c:	89 2b       	or	r24, r25
 d8e:	e1 f6       	brne	.-72     	; 0xd48 <fputc+0x10>
 d90:	d8 01       	movw	r26, r16
 d92:	16 96       	adiw	r26, 0x06	; 6
 d94:	8d 91       	ld	r24, X+
 d96:	9c 91       	ld	r25, X
 d98:	17 97       	sbiw	r26, 0x07	; 7
 d9a:	01 96       	adiw	r24, 0x01	; 1
 d9c:	17 96       	adiw	r26, 0x07	; 7
 d9e:	9c 93       	st	X, r25
 da0:	8e 93       	st	-X, r24
 da2:	16 97       	sbiw	r26, 0x06	; 6
 da4:	ce 01       	movw	r24, r28
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	08 95       	ret

00000db0 <__ultoa_invert>:
 db0:	fa 01       	movw	r30, r20
 db2:	aa 27       	eor	r26, r26
 db4:	28 30       	cpi	r18, 0x08	; 8
 db6:	51 f1       	breq	.+84     	; 0xe0c <__ultoa_invert+0x5c>
 db8:	20 31       	cpi	r18, 0x10	; 16
 dba:	81 f1       	breq	.+96     	; 0xe1c <__ultoa_invert+0x6c>
 dbc:	e8 94       	clt
 dbe:	6f 93       	push	r22
 dc0:	6e 7f       	andi	r22, 0xFE	; 254
 dc2:	6e 5f       	subi	r22, 0xFE	; 254
 dc4:	7f 4f       	sbci	r23, 0xFF	; 255
 dc6:	8f 4f       	sbci	r24, 0xFF	; 255
 dc8:	9f 4f       	sbci	r25, 0xFF	; 255
 dca:	af 4f       	sbci	r26, 0xFF	; 255
 dcc:	b1 e0       	ldi	r27, 0x01	; 1
 dce:	3e d0       	rcall	.+124    	; 0xe4c <__ultoa_invert+0x9c>
 dd0:	b4 e0       	ldi	r27, 0x04	; 4
 dd2:	3c d0       	rcall	.+120    	; 0xe4c <__ultoa_invert+0x9c>
 dd4:	67 0f       	add	r22, r23
 dd6:	78 1f       	adc	r23, r24
 dd8:	89 1f       	adc	r24, r25
 dda:	9a 1f       	adc	r25, r26
 ddc:	a1 1d       	adc	r26, r1
 dde:	68 0f       	add	r22, r24
 de0:	79 1f       	adc	r23, r25
 de2:	8a 1f       	adc	r24, r26
 de4:	91 1d       	adc	r25, r1
 de6:	a1 1d       	adc	r26, r1
 de8:	6a 0f       	add	r22, r26
 dea:	71 1d       	adc	r23, r1
 dec:	81 1d       	adc	r24, r1
 dee:	91 1d       	adc	r25, r1
 df0:	a1 1d       	adc	r26, r1
 df2:	20 d0       	rcall	.+64     	; 0xe34 <__ultoa_invert+0x84>
 df4:	09 f4       	brne	.+2      	; 0xdf8 <__ultoa_invert+0x48>
 df6:	68 94       	set
 df8:	3f 91       	pop	r19
 dfa:	2a e0       	ldi	r18, 0x0A	; 10
 dfc:	26 9f       	mul	r18, r22
 dfe:	11 24       	eor	r1, r1
 e00:	30 19       	sub	r19, r0
 e02:	30 5d       	subi	r19, 0xD0	; 208
 e04:	31 93       	st	Z+, r19
 e06:	de f6       	brtc	.-74     	; 0xdbe <__ultoa_invert+0xe>
 e08:	cf 01       	movw	r24, r30
 e0a:	08 95       	ret
 e0c:	46 2f       	mov	r20, r22
 e0e:	47 70       	andi	r20, 0x07	; 7
 e10:	40 5d       	subi	r20, 0xD0	; 208
 e12:	41 93       	st	Z+, r20
 e14:	b3 e0       	ldi	r27, 0x03	; 3
 e16:	0f d0       	rcall	.+30     	; 0xe36 <__ultoa_invert+0x86>
 e18:	c9 f7       	brne	.-14     	; 0xe0c <__ultoa_invert+0x5c>
 e1a:	f6 cf       	rjmp	.-20     	; 0xe08 <__ultoa_invert+0x58>
 e1c:	46 2f       	mov	r20, r22
 e1e:	4f 70       	andi	r20, 0x0F	; 15
 e20:	40 5d       	subi	r20, 0xD0	; 208
 e22:	4a 33       	cpi	r20, 0x3A	; 58
 e24:	18 f0       	brcs	.+6      	; 0xe2c <__ultoa_invert+0x7c>
 e26:	49 5d       	subi	r20, 0xD9	; 217
 e28:	31 fd       	sbrc	r19, 1
 e2a:	40 52       	subi	r20, 0x20	; 32
 e2c:	41 93       	st	Z+, r20
 e2e:	02 d0       	rcall	.+4      	; 0xe34 <__ultoa_invert+0x84>
 e30:	a9 f7       	brne	.-22     	; 0xe1c <__ultoa_invert+0x6c>
 e32:	ea cf       	rjmp	.-44     	; 0xe08 <__ultoa_invert+0x58>
 e34:	b4 e0       	ldi	r27, 0x04	; 4
 e36:	a6 95       	lsr	r26
 e38:	97 95       	ror	r25
 e3a:	87 95       	ror	r24
 e3c:	77 95       	ror	r23
 e3e:	67 95       	ror	r22
 e40:	ba 95       	dec	r27
 e42:	c9 f7       	brne	.-14     	; 0xe36 <__ultoa_invert+0x86>
 e44:	00 97       	sbiw	r24, 0x00	; 0
 e46:	61 05       	cpc	r22, r1
 e48:	71 05       	cpc	r23, r1
 e4a:	08 95       	ret
 e4c:	9b 01       	movw	r18, r22
 e4e:	ac 01       	movw	r20, r24
 e50:	0a 2e       	mov	r0, r26
 e52:	06 94       	lsr	r0
 e54:	57 95       	ror	r21
 e56:	47 95       	ror	r20
 e58:	37 95       	ror	r19
 e5a:	27 95       	ror	r18
 e5c:	ba 95       	dec	r27
 e5e:	c9 f7       	brne	.-14     	; 0xe52 <__ultoa_invert+0xa2>
 e60:	62 0f       	add	r22, r18
 e62:	73 1f       	adc	r23, r19
 e64:	84 1f       	adc	r24, r20
 e66:	95 1f       	adc	r25, r21
 e68:	a0 1d       	adc	r26, r0
 e6a:	08 95       	ret

00000e6c <__prologue_saves__>:
 e6c:	2f 92       	push	r2
 e6e:	3f 92       	push	r3
 e70:	4f 92       	push	r4
 e72:	5f 92       	push	r5
 e74:	6f 92       	push	r6
 e76:	7f 92       	push	r7
 e78:	8f 92       	push	r8
 e7a:	9f 92       	push	r9
 e7c:	af 92       	push	r10
 e7e:	bf 92       	push	r11
 e80:	cf 92       	push	r12
 e82:	df 92       	push	r13
 e84:	ef 92       	push	r14
 e86:	ff 92       	push	r15
 e88:	0f 93       	push	r16
 e8a:	1f 93       	push	r17
 e8c:	cf 93       	push	r28
 e8e:	df 93       	push	r29
 e90:	cd b7       	in	r28, 0x3d	; 61
 e92:	de b7       	in	r29, 0x3e	; 62
 e94:	ca 1b       	sub	r28, r26
 e96:	db 0b       	sbc	r29, r27
 e98:	0f b6       	in	r0, 0x3f	; 63
 e9a:	f8 94       	cli
 e9c:	de bf       	out	0x3e, r29	; 62
 e9e:	0f be       	out	0x3f, r0	; 63
 ea0:	cd bf       	out	0x3d, r28	; 61
 ea2:	09 94       	ijmp

00000ea4 <__epilogue_restores__>:
 ea4:	2a 88       	ldd	r2, Y+18	; 0x12
 ea6:	39 88       	ldd	r3, Y+17	; 0x11
 ea8:	48 88       	ldd	r4, Y+16	; 0x10
 eaa:	5f 84       	ldd	r5, Y+15	; 0x0f
 eac:	6e 84       	ldd	r6, Y+14	; 0x0e
 eae:	7d 84       	ldd	r7, Y+13	; 0x0d
 eb0:	8c 84       	ldd	r8, Y+12	; 0x0c
 eb2:	9b 84       	ldd	r9, Y+11	; 0x0b
 eb4:	aa 84       	ldd	r10, Y+10	; 0x0a
 eb6:	b9 84       	ldd	r11, Y+9	; 0x09
 eb8:	c8 84       	ldd	r12, Y+8	; 0x08
 eba:	df 80       	ldd	r13, Y+7	; 0x07
 ebc:	ee 80       	ldd	r14, Y+6	; 0x06
 ebe:	fd 80       	ldd	r15, Y+5	; 0x05
 ec0:	0c 81       	ldd	r16, Y+4	; 0x04
 ec2:	1b 81       	ldd	r17, Y+3	; 0x03
 ec4:	aa 81       	ldd	r26, Y+2	; 0x02
 ec6:	b9 81       	ldd	r27, Y+1	; 0x01
 ec8:	ce 0f       	add	r28, r30
 eca:	d1 1d       	adc	r29, r1
 ecc:	0f b6       	in	r0, 0x3f	; 63
 ece:	f8 94       	cli
 ed0:	de bf       	out	0x3e, r29	; 62
 ed2:	0f be       	out	0x3f, r0	; 63
 ed4:	cd bf       	out	0x3d, r28	; 61
 ed6:	ed 01       	movw	r28, r26
 ed8:	08 95       	ret

00000eda <_exit>:
 eda:	f8 94       	cli

00000edc <__stop_program>:
 edc:	ff cf       	rjmp	.-2      	; 0xedc <__stop_program>
