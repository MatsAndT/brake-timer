
RTC_read_timer_intervall.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1d  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  00000f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000524  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000524  00000000  00000000  000020c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000025e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  7a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_enable_pulse>:
}

unsigned char USART_Receive_buffer()
{
	return(UDR);
}
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8b bb       	out	0x1b, r24	; 27
  88:	00 00       	nop
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	8e e7       	ldi	r24, 0x7E	; 126
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_enable_pulse+0x12>
  98:	00 00       	nop
  9a:	08 95       	ret

0000009c <LCD_Command>:
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_enable_pulse>
  ae:	08 95       	ret

000000b0 <LCD_Char>:
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_enable_pulse>
  c2:	08 95       	ret

000000c4 <LCD_String>:
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <LCD_String+0x16>
  d4:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Char>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	f8 01       	movw	r30, r16
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	f7 cf       	rjmp	.-18     	; 0xd4 <LCD_String+0x10>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <LCD_String_xy>:
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ea 01       	movw	r28, r20
  f6:	81 11       	cpse	r24, r1
  f8:	07 c0       	rjmp	.+14     	; 0x108 <LCD_String_xy+0x18>
  fa:	60 31       	cpi	r22, 0x10	; 16
  fc:	28 f4       	brcc	.+10     	; 0x108 <LCD_String_xy+0x18>
  fe:	86 2f       	mov	r24, r22
 100:	80 68       	ori	r24, 0x80	; 128
 102:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 106:	08 c0       	rjmp	.+16     	; 0x118 <LCD_String_xy+0x28>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	31 f4       	brne	.+12     	; 0x118 <LCD_String_xy+0x28>
 10c:	60 31       	cpi	r22, 0x10	; 16
 10e:	20 f4       	brcc	.+8      	; 0x118 <LCD_String_xy+0x28>
 110:	86 2f       	mov	r24, r22
 112:	80 6c       	ori	r24, 0xC0	; 192
 114:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 118:	ce 01       	movw	r24, r28
 11a:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_String>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_Clear>:
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 130:	08 95       	ret

00000132 <LCD_Init>:
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
 136:	87 bb       	out	0x17, r24	; 23
 138:	87 e8       	ldi	r24, 0x87	; 135
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Init+0xa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Init+0x10>
 142:	00 00       	nop
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 14a:	8c e0       	ldi	r24, 0x0C	; 12
 14c:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Command>
 156:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Clear>
 15a:	08 95       	ret

0000015c <USART_Init>:
 15c:	2a b1       	in	r18, 0x0a	; 10
 15e:	28 61       	ori	r18, 0x18	; 24
 160:	2a b9       	out	0x0a, r18	; 10
 162:	20 b5       	in	r18, 0x20	; 32
 164:	26 68       	ori	r18, 0x86	; 134
 166:	20 bd       	out	0x20, r18	; 32
 168:	2b b1       	in	r18, 0x0b	; 11
 16a:	22 60       	ori	r18, 0x02	; 2
 16c:	2b b9       	out	0x0b, r18	; 11
 16e:	2a b1       	in	r18, 0x0a	; 10
 170:	20 68       	ori	r18, 0x80	; 128
 172:	2a b9       	out	0x0a, r18	; 10
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	aa 1f       	adc	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	9c 01       	movw	r18, r24
 18a:	ad 01       	movw	r20, r26
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	44 1f       	adc	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	72 e4       	ldi	r23, 0x42	; 66
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 0e 01 	call	0x21c	; 0x21c <__udivmodsi4>
 1a0:	da 01       	movw	r26, r20
 1a2:	c9 01       	movw	r24, r18
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	a1 09       	sbc	r26, r1
 1a8:	b1 09       	sbc	r27, r1
 1aa:	89 b9       	out	0x09, r24	; 9
 1ac:	89 2f       	mov	r24, r25
 1ae:	9a 2f       	mov	r25, r26
 1b0:	ab 2f       	mov	r26, r27
 1b2:	bb 27       	eor	r27, r27
 1b4:	a7 fd       	sbrc	r26, 7
 1b6:	ba 95       	dec	r27
 1b8:	80 bd       	out	0x20, r24	; 32
 1ba:	08 95       	ret

000001bc <USART_Transmit>:

void USART_Transmit(unsigned char data){
	while ((UCSRA & (1 << UDRE)) == 0);		//Wait until the transmitter is ready
 1bc:	5d 9b       	sbis	0x0b, 5	; 11
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <USART_Transmit>
	UDR = data; //Put the data in the register
 1c0:	8c b9       	out	0x0c, r24	; 12
 1c2:	08 95       	ret

000001c4 <USART_Transmit_String>:
}

void USART_Transmit_String(char str[]){
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	8c 01       	movw	r16, r24
	int i = 0;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		char character = str[i];
 1d2:	f8 01       	movw	r30, r16
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
		USART_Transmit(character);
 1d8:	80 81       	ld	r24, Z
 1da:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_Transmit>
		i++;
 1de:	21 96       	adiw	r28, 0x01	; 1
	} while (str[i] != '\0');
 1e0:	f8 01       	movw	r30, r16
 1e2:	ec 0f       	add	r30, r28
 1e4:	fd 1f       	adc	r31, r29
 1e6:	80 81       	ld	r24, Z
 1e8:	81 11       	cpse	r24, r1
 1ea:	f3 cf       	rjmp	.-26     	; 0x1d2 <USART_Transmit_String+0xe>
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <main>:



int main(void)
{
	USART_Init(9600);
 1f6:	60 e8       	ldi	r22, 0x80	; 128
 1f8:	75 e2       	ldi	r23, 0x25	; 37
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ae 00 	call	0x15c	; 0x15c <USART_Init>
	USART_Transmit_String("Heisann sveisann");
 202:	83 e6       	ldi	r24, 0x63	; 99
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit_String>
	LCD_Init();
 20a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	LCD_String_xy(0,0, "hei");
 20e:	44 e7       	ldi	r20, 0x74	; 116
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_String_xy>
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x24>

0000021c <__udivmodsi4>:
 21c:	a1 e2       	ldi	r26, 0x21	; 33
 21e:	1a 2e       	mov	r1, r26
 220:	aa 1b       	sub	r26, r26
 222:	bb 1b       	sub	r27, r27
 224:	fd 01       	movw	r30, r26
 226:	0d c0       	rjmp	.+26     	; 0x242 <__udivmodsi4_ep>

00000228 <__udivmodsi4_loop>:
 228:	aa 1f       	adc	r26, r26
 22a:	bb 1f       	adc	r27, r27
 22c:	ee 1f       	adc	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	a2 17       	cp	r26, r18
 232:	b3 07       	cpc	r27, r19
 234:	e4 07       	cpc	r30, r20
 236:	f5 07       	cpc	r31, r21
 238:	20 f0       	brcs	.+8      	; 0x242 <__udivmodsi4_ep>
 23a:	a2 1b       	sub	r26, r18
 23c:	b3 0b       	sbc	r27, r19
 23e:	e4 0b       	sbc	r30, r20
 240:	f5 0b       	sbc	r31, r21

00000242 <__udivmodsi4_ep>:
 242:	66 1f       	adc	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	1a 94       	dec	r1
 24c:	69 f7       	brne	.-38     	; 0x228 <__udivmodsi4_loop>
 24e:	60 95       	com	r22
 250:	70 95       	com	r23
 252:	80 95       	com	r24
 254:	90 95       	com	r25
 256:	9b 01       	movw	r18, r22
 258:	ac 01       	movw	r20, r24
 25a:	bd 01       	movw	r22, r26
 25c:	cf 01       	movw	r24, r30
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
