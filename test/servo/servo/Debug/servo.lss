
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079c  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063b  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <servo_init>:
#ifndef SERVO_H_
#define SERVO_H_

void servo_init(char _servo_reg, uint8_t _servo_pin) {
	_servo_reg |= (1 << _servo_pin);	/* Make OC1A pin as output */
	TCNT1 = 0;			/* Set timer1 count zero */
  6c:	1d bc       	out	0x2d, r1	; 45
  6e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 24990;		/* Set TOP count for timer1 in ICR1 register */
  70:	8e e9       	ldi	r24, 0x9E	; 158
  72:	91 e6       	ldi	r25, 0x61	; 97
  74:	97 bd       	out	0x27, r25	; 39
  76:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  78:	82 e8       	ldi	r24, 0x82	; 130
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  7c:	8b e1       	ldi	r24, 0x1B	; 27
  7e:	8e bd       	out	0x2e, r24	; 46
  80:	08 95       	ret

00000082 <degreesToOCR1A>:
	int maxDegree = 90;  // Maximum angle (degrees)
	int minOCR1A = 65;   // OCR1A value for -90° position
	int maxOCR1A = 300;  // OCR1A value for +90° position
	
	// Perform linear mapping
	int ocrValue = minOCR1A + (degrees - minDegree) * (maxOCR1A - minOCR1A) / (maxDegree - minDegree);
  82:	9c 01       	movw	r18, r24
  84:	26 5a       	subi	r18, 0xA6	; 166
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	4b ee       	ldi	r20, 0xEB	; 235
  8a:	42 9f       	mul	r20, r18
  8c:	c0 01       	movw	r24, r0
  8e:	43 9f       	mul	r20, r19
  90:	90 0d       	add	r25, r0
  92:	11 24       	eor	r1, r1
  94:	64 eb       	ldi	r22, 0xB4	; 180
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  9c:	cb 01       	movw	r24, r22
  9e:	8f 5b       	subi	r24, 0xBF	; 191
  a0:	9f 4f       	sbci	r25, 0xFF	; 255
	
	// Ensure the result is within the valid range
	if (ocrValue < minOCR1A) {
  a2:	81 34       	cpi	r24, 0x41	; 65
  a4:	91 05       	cpc	r25, r1
  a6:	2c f0       	brlt	.+10     	; 0xb2 <degreesToOCR1A+0x30>
		ocrValue = minOCR1A;
		} else if (ocrValue > maxOCR1A) {
  a8:	8d 32       	cpi	r24, 0x2D	; 45
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	92 07       	cpc	r25, r18
  ae:	24 f4       	brge	.+8      	; 0xb8 <degreesToOCR1A+0x36>
  b0:	08 95       	ret
	// Perform linear mapping
	int ocrValue = minOCR1A + (degrees - minDegree) * (maxOCR1A - minOCR1A) / (maxDegree - minDegree);
	
	// Ensure the result is within the valid range
	if (ocrValue < minOCR1A) {
		ocrValue = minOCR1A;
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret
		} else if (ocrValue > maxOCR1A) {
		ocrValue = maxOCR1A;
  b8:	8c e2       	ldi	r24, 0x2C	; 44
  ba:	91 e0       	ldi	r25, 0x01	; 1
	}
	
	return ocrValue;
}
  bc:	08 95       	ret

000000be <servo_move>:

void servo_move(uint8_t degrees) {
	OCR1A = degreesToOCR1A(degrees);
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 41 00 	call	0x82	; 0x82 <degreesToOCR1A>
  c4:	9b bd       	out	0x2b, r25	; 43
  c6:	8a bd       	out	0x2a, r24	; 42
  c8:	08 95       	ret

000000ca <main>:
#define servo_pin PD5
#include "servo.h"

int main(void)
{
	servo_init(servo_reg, servo_pin);
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <servo_init>
	
	
	while(1)
	{
		servo_move(-90);		/* Set servo shaft at -90° position */
  d2:	86 ea       	ldi	r24, 0xA6	; 166
  d4:	0e 94 5f 00 	call	0xbe	; 0xbe <servo_move>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ed       	ldi	r18, 0xDF	; 223
  da:	83 e9       	ldi	r24, 0x93	; 147
  dc:	94 e0       	ldi	r25, 0x04	; 4
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x14>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x1e>
  e8:	00 00       	nop
		_delay_ms(1500);
		servo_move(0);	/* Set servo shaft at 0° position */
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 5f 00 	call	0xbe	; 0xbe <servo_move>
  f0:	2f ed       	ldi	r18, 0xDF	; 223
  f2:	83 e9       	ldi	r24, 0x93	; 147
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x36>
 100:	00 00       	nop
		_delay_ms(1500);
		servo_move(90);	/* Set servo at +90° position */
 102:	8a e5       	ldi	r24, 0x5A	; 90
 104:	0e 94 5f 00 	call	0xbe	; 0xbe <servo_move>
 108:	2f ed       	ldi	r18, 0xDF	; 223
 10a:	83 e9       	ldi	r24, 0x93	; 147
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x44>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x4e>
 118:	00 00       	nop
 11a:	db cf       	rjmp	.-74     	; 0xd2 <main+0x8>

0000011c <__divmodhi4>:
 11c:	97 fb       	bst	r25, 7
 11e:	07 2e       	mov	r0, r23
 120:	16 f4       	brtc	.+4      	; 0x126 <__divmodhi4+0xa>
 122:	00 94       	com	r0
 124:	07 d0       	rcall	.+14     	; 0x134 <__divmodhi4_neg1>
 126:	77 fd       	sbrc	r23, 7
 128:	09 d0       	rcall	.+18     	; 0x13c <__divmodhi4_neg2>
 12a:	0e 94 a2 00 	call	0x144	; 0x144 <__udivmodhi4>
 12e:	07 fc       	sbrc	r0, 7
 130:	05 d0       	rcall	.+10     	; 0x13c <__divmodhi4_neg2>
 132:	3e f4       	brtc	.+14     	; 0x142 <__divmodhi4_exit>

00000134 <__divmodhi4_neg1>:
 134:	90 95       	com	r25
 136:	81 95       	neg	r24
 138:	9f 4f       	sbci	r25, 0xFF	; 255
 13a:	08 95       	ret

0000013c <__divmodhi4_neg2>:
 13c:	70 95       	com	r23
 13e:	61 95       	neg	r22
 140:	7f 4f       	sbci	r23, 0xFF	; 255

00000142 <__divmodhi4_exit>:
 142:	08 95       	ret

00000144 <__udivmodhi4>:
 144:	aa 1b       	sub	r26, r26
 146:	bb 1b       	sub	r27, r27
 148:	51 e1       	ldi	r21, 0x11	; 17
 14a:	07 c0       	rjmp	.+14     	; 0x15a <__udivmodhi4_ep>

0000014c <__udivmodhi4_loop>:
 14c:	aa 1f       	adc	r26, r26
 14e:	bb 1f       	adc	r27, r27
 150:	a6 17       	cp	r26, r22
 152:	b7 07       	cpc	r27, r23
 154:	10 f0       	brcs	.+4      	; 0x15a <__udivmodhi4_ep>
 156:	a6 1b       	sub	r26, r22
 158:	b7 0b       	sbc	r27, r23

0000015a <__udivmodhi4_ep>:
 15a:	88 1f       	adc	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	5a 95       	dec	r21
 160:	a9 f7       	brne	.-22     	; 0x14c <__udivmodhi4_loop>
 162:	80 95       	com	r24
 164:	90 95       	com	r25
 166:	bc 01       	movw	r22, r24
 168:	cd 01       	movw	r24, r26
 16a:	08 95       	ret

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
