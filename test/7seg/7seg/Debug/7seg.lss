
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000784  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000370  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022c  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  8a:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seg_init>:
#define PORT_DIGIT_SELECT PORTA

void seg_init()
{
	/* Configure the ports as output */
	DDR_PINS = 0xff; // Data lines
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	DDR_SELECT = 0xff; // Control signal PORTD0-PORTD3
  96:	8a bb       	out	0x1a, r24	; 26
	
	// Turn off the display
	PORT_DIGIT_SELECT = 0x00;
  98:	1b ba       	out	0x1b, r1	; 27
	PORT_DIGIT_PINS = 0xff;
  9a:	85 bb       	out	0x15, r24	; 21
	
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  9c:	8e b5       	in	r24, 0x2e	; 46
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	8e bd       	out	0x2e, r24	; 46

	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
  a2:	89 b7       	in	r24, 0x39	; 57
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	89 bf       	out	0x39, r24	; 57

	sei(); //  Enable global interrupts
  a8:	78 94       	sei

	OCR1A = 313; // Set CTC compare value to 313 for 50Hz at 1MHz AVR clock, with a prescaler of 64
  aa:	89 e3       	ldi	r24, 0x39	; 57
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42

	TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
  b2:	8e b5       	in	r24, 0x2e	; 46
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	08 95       	ret

000000ba <diplay_one_cycle>:
}

#define display_delay 1
void diplay_one_cycle()
{
	temp = num % 10;
  ba:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <num>
  be:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <num+0x1>
  c2:	2a e0       	ldi	r18, 0x0A	; 10
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	b9 01       	movw	r22, r18
  c8:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
  cc:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <temp+0x1>
  d0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <temp>
	PORT_DIGIT_SELECT = SegOne;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8b bb       	out	0x1b, r24	; 27
	PORT_DIGIT_PINS = seg_code[temp];
  d8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <temp>
  dc:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <temp+0x1>
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 81       	ld	r24, Z
  e6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	89 ef       	ldi	r24, 0xF9	; 249
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <diplay_one_cycle+0x32>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <diplay_one_cycle+0x38>
  f2:	00 00       	nop
	_delay_ms(display_delay);
	
	temp = (num / 10) % 10;
  f4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <num>
  f8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <num+0x1>
  fc:	b9 01       	movw	r22, r18
  fe:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	b9 01       	movw	r22, r18
 106:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 10a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <temp+0x1>
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <temp>
	PORT_DIGIT_SELECT = SegTwo;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	8b bb       	out	0x1b, r24	; 27
	PORT_DIGIT_PINS = seg_code[temp];
 116:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <temp>
 11a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <temp+0x1>
 11e:	e0 5a       	subi	r30, 0xA0	; 160
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 81       	ld	r24, Z
 124:	85 bb       	out	0x15, r24	; 21
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <diplay_one_cycle+0x70>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <diplay_one_cycle+0x76>
 130:	00 00       	nop
	_delay_ms(display_delay);
	
	temp = (num / 100) % 10;
 132:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <num>
 136:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <num+0x1>
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 142:	cb 01       	movw	r24, r22
 144:	b9 01       	movw	r22, r18
 146:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 14a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <temp+0x1>
 14e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <temp>
	PORT_DIGIT_SELECT = SegThree;
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	8b bb       	out	0x1b, r24	; 27
	PORT_DIGIT_PINS = seg_code[temp];
 156:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <temp>
 15a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <temp+0x1>
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
 164:	85 bb       	out	0x15, r24	; 21
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <diplay_one_cycle+0xb0>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <diplay_one_cycle+0xb6>
 170:	00 00       	nop
	_delay_ms(display_delay);

	temp = (num / 1000) % 10;
 172:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <num>
 176:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <num+0x1>
 17a:	68 ee       	ldi	r22, 0xE8	; 232
 17c:	73 e0       	ldi	r23, 0x03	; 3
 17e:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 182:	cb 01       	movw	r24, r22
 184:	b9 01       	movw	r22, r18
 186:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 18a:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <temp+0x1>
 18e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <temp>
	PORT_DIGIT_SELECT = SegFour;
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	8b bb       	out	0x1b, r24	; 27
	PORT_DIGIT_PINS = seg_code[temp];
 196:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <temp>
 19a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <temp+0x1>
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	89 ef       	ldi	r24, 0xF9	; 249
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <diplay_one_cycle+0xf0>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <diplay_one_cycle+0xf6>
 1b0:	00 00       	nop
 1b2:	08 95       	ret

000001b4 <__vector_7>:
	_delay_ms(display_delay);
}

ISR(TIMER1_COMPA_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	diplay_one_cycle();
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <diplay_one_cycle>
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <main>:
int secounds_to_brake = 0;


int main() {
	// Turn of JTAG
	MCUCSR = (1 << JTD); //-U hfuse:w:0xD9:m
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	84 bf       	out	0x34, r24	; 52
	//                 0    1     2   3    4     5   6    7    8    9   
	//char seg_code[]= {0x03,0x9F,0x25,0x0d,0x99,0x49,0x41,0x1f,0x01,0x19};
	
	seg_init();
 200:	0e 94 49 00 	call	0x92	; 0x92 <seg_init>
	num = 4321;
 204:	81 ee       	ldi	r24, 0xE1	; 225
 206:	90 e1       	ldi	r25, 0x10	; 16
 208:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <num+0x1>
 20c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <num>
	secounds_to_brake = num;
 210:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 214:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	
	// Clock
	TCCR2 |= (1 << WGM12); // Configure timer 1 for CTC mode
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	85 bd       	out	0x25, r24	; 37

	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
 21e:	89 b7       	in	r24, 0x39	; 57
 220:	80 61       	ori	r24, 0x10	; 16
 222:	89 bf       	out	0x39, r24	; 57

	sei(); //  Enable global interrupts
 224:	78 94       	sei

	OCR1A = 313; // Set CTC compare value to 313 for 50Hz at 1MHz AVR clock, with a prescaler of 64
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	9b bd       	out	0x2b, r25	; 43
 22c:	8a bd       	out	0x2a, r24	; 42

	TCCR2 |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
 22e:	85 b5       	in	r24, 0x25	; 37
 230:	83 60       	ori	r24, 0x03	; 3
 232:	85 bd       	out	0x25, r24	; 37
 234:	ff cf       	rjmp	.-2      	; 0x234 <main+0x38>

00000236 <__divmodhi4>:
 236:	97 fb       	bst	r25, 7
 238:	07 2e       	mov	r0, r23
 23a:	16 f4       	brtc	.+4      	; 0x240 <__divmodhi4+0xa>
 23c:	00 94       	com	r0
 23e:	07 d0       	rcall	.+14     	; 0x24e <__divmodhi4_neg1>
 240:	77 fd       	sbrc	r23, 7
 242:	09 d0       	rcall	.+18     	; 0x256 <__divmodhi4_neg2>
 244:	0e 94 2f 01 	call	0x25e	; 0x25e <__udivmodhi4>
 248:	07 fc       	sbrc	r0, 7
 24a:	05 d0       	rcall	.+10     	; 0x256 <__divmodhi4_neg2>
 24c:	3e f4       	brtc	.+14     	; 0x25c <__divmodhi4_exit>

0000024e <__divmodhi4_neg1>:
 24e:	90 95       	com	r25
 250:	81 95       	neg	r24
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	08 95       	ret

00000256 <__divmodhi4_neg2>:
 256:	70 95       	com	r23
 258:	61 95       	neg	r22
 25a:	7f 4f       	sbci	r23, 0xFF	; 255

0000025c <__divmodhi4_exit>:
 25c:	08 95       	ret

0000025e <__udivmodhi4>:
 25e:	aa 1b       	sub	r26, r26
 260:	bb 1b       	sub	r27, r27
 262:	51 e1       	ldi	r21, 0x11	; 17
 264:	07 c0       	rjmp	.+14     	; 0x274 <__udivmodhi4_ep>

00000266 <__udivmodhi4_loop>:
 266:	aa 1f       	adc	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	a6 17       	cp	r26, r22
 26c:	b7 07       	cpc	r27, r23
 26e:	10 f0       	brcs	.+4      	; 0x274 <__udivmodhi4_ep>
 270:	a6 1b       	sub	r26, r22
 272:	b7 0b       	sbc	r27, r23

00000274 <__udivmodhi4_ep>:
 274:	88 1f       	adc	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	5a 95       	dec	r21
 27a:	a9 f7       	brne	.-22     	; 0x266 <__udivmodhi4_loop>
 27c:	80 95       	com	r24
 27e:	90 95       	com	r25
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
